/*----------------------------------------------------------------------
Oberon2 compiler for x86
Copyright (c) 2012 Evgeniy Grigorievitch Philippov
Distributed under the terms of GNU General Public License, v.3 or later

Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/

#if !defined(Oberon_COCO_PARSER_H)
#define Oberon_COCO_PARSER_H

#include "common.h"

#include "stdio.h"
#include "wchar.h"

namespace Oberon {class CodeGenerator;class SymbolTable;}
#include "SymbolTable.h"
#include "CodeGenerator.h"

#include "Scanner.h"

namespace Oberon {

class Errors {
public:
	int count;			// number of errors detected

	Errors();
	void SynErr(int line, int col, int n);
	void Error(int line, int col, const wchar_t *s);
	void Warning(int line, int col, const wchar_t *s);
	void Warning(const wchar_t *s);
	void Exception(const wchar_t *s);

}; // Errors

class Parser {
//public:
	//void addParserListener(const ParserListener *const parserListener){this->parserListener=parserListener;}
private:
	enum {
		_EOF=0,
		_ident=1,
		_badString=2,
		_string=3,
		_integer=4,
		_real=5
	};
	int maxT;

	//const ParserListener *parserListener;
	Token *dummyToken;
	int errDist;
	int minErrDist;

	void SynErr(int n);
	void Get();
	void Expect(int n);
	bool StartOf(int s);
	void ExpectWeak(int n, int follow);
	bool WeakSeparator(int n, int syFol, int repFol);

public:
	Scanner *scanner;
	Errors  *errors;

	Token *t;			// last recognized token
	Token *la;			// lookahead token

typedef bool boolean;

	enum OperatorsEnum { 
	  illegal_operator, plus, minus, times, slash, equals, less, greater,
	  orOperation, notEquals, lessOrEqual, greaterOrEqual, in, is, divOp, 
	  modOp, ampersand
	};

	enum ObjectKindsEnum {
	  var, proc
	};

	enum OpcodesEnum { 
	  ADD,  SUB,  MUL,  DIV,   EQU,  LSS, GTR, NEG,
	  LOAD, LOADG, STO,   STOG,  CONST,
	  CALL, RET,   
	  ENTER, LEAVE,
	  JMP,  FJMP,  READ,  WRITE
	};

	typedef wchar_t* characterRecord; 
	typedef wchar_t* stringRecord; 
	typedef wchar_t* identRec; 

	struct QualidentRecord{
		identRec leftIdent;
		identRec rightIdent; /* rightIdent==0 if not specified */
	};

	enum NumTypeEnum {num_int, num_real};
	
	struct numberRecord{
		NumTypeEnum numtype;
		wchar_t* tokenString;
	};
	  
	struct identRecord{
		wchar_t* ident_;
	};
	
	enum FactorTypeEnum {
		ft_undef,
		ft_DesignatorMaybeWithExprList,
		ft_number,
		ft_character,
		ft_string,
		ft_NIL,
		ft_Set,
		ft_Expr,
		ft_tildeFactor
	};

	struct FactorRecord{
		virtual FactorTypeEnum getFactorType()=0; //ft_*
	};
	
	struct TermMulOpRecord{
		int mulOp;
		FactorRecord* factorPtr;
		TermMulOpRecord* nullOrNextTermMulOpRecord;
	} *PtrToTermMulOpRecord;

	struct TermRecord{
		FactorRecord* factorPtr;
		TermMulOpRecord* nullOrNextTermMulOpRecord;
	} *PtrToTermRecord;

	struct SimpleExprAddOpRecord{
		int addOp;
	 	TermRecord term;
	 	SimpleExprAddOpRecord* nullOrNextSimpleExprAddOpRecord;
	} *PtrToSimpleExprAddOpRecord;
	
	struct SimpleExprRecord{
		boolean minus;
		TermRecord term;
	 	SimpleExprAddOpRecord* nullOrNextSimpleExprAddOpRecord;
	};
		  
	struct ExprRecord{
		SimpleExprRecord lhs;
		boolean opAndRhsPresent;
		int op;
		SimpleExprRecord rhs;
	};

	struct ElementRangeRecord{
		ExprRecord expr1;
		boolean isrange;
		ExprRecord expr2;
	};
	
	struct SetRecord{
		boolean emptySet;
		ElementRangeRecord range;
		SetRecord* nullOrPtrToNextSet;
	};

	struct ExprListRecord{
		ExprRecord expr;
		ExprListRecord *nullOrCommaExprList;
	};

	struct QualidentOrOptionalExprListRecord{
		boolean exprListPresent;
		ExprListRecord exprList;
	};

	struct FactorRecord_Expr: public FactorRecord{
		virtual FactorTypeEnum getFactorType(){return ft_Expr;}
		ExprRecord expr;
	};

	enum ClauseEnum {cl1,cl2,cl3,cl4};
	
	struct DesignatorMaybeWithExprListRepeatingPartRecord{
		virtual ClauseEnum getClauseNumber()=0;
		DesignatorMaybeWithExprListRepeatingPartRecord* nullOrPtrToNextDesignatorMaybeWithExprListRepeatingPartRecord;
/*
	("." ident 			//clauseNumber==1
	| "[" ExprList "]" 	//clauseNumber==2
	| "^" 				//clauseNumber==3
	| "(" QualidentOrOptionalExprList ")" //clauseNumber==4
	)
*/
	};

	struct DesignatorMaybeWithExprListRepeatingPartRecordCL1 : public DesignatorMaybeWithExprListRepeatingPartRecord{
		virtual ClauseEnum getClauseNumber() {return cl1;}
		identRec clause1_identRec;
		//"." ident
	};
	struct DesignatorMaybeWithExprListRepeatingPartRecordCL2 : public DesignatorMaybeWithExprListRepeatingPartRecord{
		virtual ClauseEnum getClauseNumber() {return cl2;}
		ExprListRecord clause2_exprList;
		//"[" ExprList "]"
	};
	struct DesignatorMaybeWithExprListRepeatingPartRecordCL3 : public DesignatorMaybeWithExprListRepeatingPartRecord{
		virtual ClauseEnum getClauseNumber() {return cl3;}
	    //"^"
	};
	struct DesignatorMaybeWithExprListRepeatingPartRecordCL4 : public DesignatorMaybeWithExprListRepeatingPartRecord{
		virtual ClauseEnum getClauseNumber() {return cl4;}
		QualidentOrOptionalExprListRecord clause4_qualidentOrOptionalExprList;
		//"(" QualidentOrOptionalExprList ")"
	};

	struct DesignatorMaybeWithExprListRecord{
		identRecord identRec;
		DesignatorMaybeWithExprListRepeatingPartRecord* nullOrPtrToNextDesignatorMaybeWithExprListRepeatingPartRecord;
	};


	struct FactorRecord_DesignatorMaybeWithExprList: public FactorRecord{
		virtual FactorTypeEnum getFactorType(){return ft_DesignatorMaybeWithExprList;}
		DesignatorMaybeWithExprListRecord r; 
	};
  
	struct FactorRecord_number: public FactorRecord{
		virtual FactorTypeEnum getFactorType(){return ft_number;}
		numberRecord num; 
	};
  
	struct FactorRecord_character: public FactorRecord{
		virtual FactorTypeEnum getFactorType(){return ft_character;}
		characterRecord ch; 
	};
  
	struct FactorRecord_string: public FactorRecord{
		virtual FactorTypeEnum getFactorType(){return ft_string;}
		stringRecord s; 
	};
  
	struct FactorRecord_NIL: public FactorRecord{
		virtual FactorTypeEnum getFactorType(){return ft_NIL;}
	};

	struct FactorRecord_Set: public FactorRecord{
		virtual FactorTypeEnum getFactorType(){return ft_Set;}
		SetRecord set;
	};
 
	struct FactorRecord_tildeFactor: public FactorRecord{
		virtual FactorTypeEnum getFactorType(){return ft_tildeFactor;}
		FactorRecord* factorPtr;
	};

	enum ModifierEnum {modifier_none, modifier_star, modifier_minus};
	
	struct IdentDefRecord{
		identRec ident_;
		ModifierEnum modifier;
	};

	struct IdentListRecord{
		IdentDefRecord identDef;
		IdentListRecord* nullOrCommaIdentList;
	};
	struct IdentList2Record{
		identRec ident_;
		IdentList2Record* nullOrCommaIdentList;
	};

	enum StmtTypeNumberEnum {
		 stmtTypeNumber_EmptyStmt
		,stmtTypeNumber_EXPR_OR_ASSIGN
		,stmtTypeNumber_IF
		,stmtTypeNumber_CASE
		,stmtTypeNumber_WHILE
		,stmtTypeNumber_REPEAT
		,stmtTypeNumber_FOR
		,stmtTypeNumber_LOOP
		,stmtTypeNumber_WITH
		,stmtTypeNumber_EXIT
		,stmtTypeNumber_RETURN
	};
	
	struct StatementRecord{
		virtual StmtTypeNumberEnum getStatementTypeNumber()=0; 
	};

	struct StatementSeqRecord{
		StatementRecord *statementPtr;
		StatementSeqRecord* nullOrPtrToNextStatementSeq;
	};

	enum TypeNumberQARPPEnum { 
		 type_number_Qualident
		,type_number_ARRAY
		,type_number_RECORD
		,type_number_POINTER
		,type_number_PROCEDURE
	};
	
	struct TypeRecord{
		virtual TypeNumberQARPPEnum getTypeNumber()=0;
	};

	struct VarDeclRecord{
		IdentListRecord identList;
		TypeRecord *typePtr;
	};
	
	struct ValuePlaceholder{
		virtual int getValueType()=0;
	};
	
	struct ConstExprRecord{
		boolean valueHasBeenCalculated;
		ValuePlaceholder *constValuePtr;
		ExprRecord expr;
	};
	
	struct ConstDeclRecord{
		IdentDefRecord identDef;
		ConstExprRecord expr;
	};

	struct TypeDeclRecord{
		IdentDefRecord identDef;
		TypeRecord *typePtr;
	};
	
	struct ModuleImportEntryRecord{
		identRec lhs, rhs;
		boolean rhsPresent;
	};

	struct ImportListRecord{
		ModuleImportEntryRecord moduleImportEntry;
		ImportListRecord *nullOrPtrToNextModuleImportEntriesList;
	};

	struct ReceiverRecord{
		bool varSpecified;
		identRec leftIdent;
		identRec rightIdent;
	};
	
	struct OptionalReceiverRecord{
		bool receiverSpecified;
		ReceiverRecord receiver;
	};

	struct FPSectionRecord{
		bool var;
		IdentList2Record identList;
		TypeRecord *typePtr;
	};
	struct FPSectionsListMandatoryRecord{
		FPSectionRecord fpSection;
		FPSectionsListMandatoryRecord *next;
	};
	struct FormalParsRecord{
		FPSectionsListMandatoryRecord *optionalFPSectionsListPtr;
		QualidentRecord *optionalQualidentPtr;
	}; 

	struct OptionalFormalParsRecord{
		bool formalParsSpecified;
		FormalParsRecord formalPars;
	};

	struct ForwardDeclRecord{
		OptionalReceiverRecord optionalReceiver;
		IdentDefRecord identDef;
		OptionalFormalParsRecord optionalFormalPars;
	};

	struct FieldListRecord{
		bool fieldsPresent;
		IdentListRecord identList;
		TypeRecord *typePtr;
	};

	struct MandatoryFieldsListRecord{
		FieldListRecord recordFieldsList;
		MandatoryFieldsListRecord *next;
	};

	struct DeclSeqConstDeclListMandatoryRecord{
		ConstDeclRecord constDecl;
		DeclSeqConstDeclListMandatoryRecord *nullOrPtrToNextDeclSeqConstDeclListMandatory;
	};
	struct DeclSeqTypeDeclListMandatoryRecord{
		TypeDeclRecord typeDecl;
		DeclSeqTypeDeclListMandatoryRecord *nullOrPtrToNextDeclSeqTypeDeclListMandatory;
	};
	struct DeclSeqVarDeclListMandatoryRecord{
		VarDeclRecord varDecl;
		DeclSeqVarDeclListMandatoryRecord *nullOrPtrToNextDeclSeqVarDeclListMandatory;
	};
	
	struct DeclSeqConstDeclListRecord{
		bool specified;
		DeclSeqConstDeclListMandatoryRecord constDecls; /* undefined if specified==false*/
	};
	struct DeclSeqTypeDeclListRecord{
		bool specified;
		DeclSeqTypeDeclListMandatoryRecord typeDecls; /* undefined if specified==false*/
	};
	struct DeclSeqVarDeclListRecord{
		bool specified;
		DeclSeqVarDeclListMandatoryRecord varDecls; /* undefined if specified==false*/
	};

	enum DeclEnum {decl_const,decl_type,decl_var};
	
	struct DeclSeqConstTypeVarListMandatoryRecord{
		virtual DeclEnum get_decl_variant()=0;
		DeclSeqConstTypeVarListMandatoryRecord *next;
	}; 
	
	struct DeclSeqConst : public DeclSeqConstTypeVarListMandatoryRecord{
		virtual DeclEnum get_decl_variant() {return decl_const;}
		DeclSeqConstDeclListRecord constDeclList; 
	}; 

	struct DeclSeqType : public DeclSeqConstTypeVarListMandatoryRecord{
		virtual DeclEnum get_decl_variant() {return decl_type;}
		DeclSeqTypeDeclListRecord typeDeclList;
	}; 

	struct DeclSeqVar : public DeclSeqConstTypeVarListMandatoryRecord{
		virtual DeclEnum get_decl_variant() {return decl_var;}
		DeclSeqVarDeclListRecord varDeclList;
	}; 

	struct DeclSeqConstTypeVarListRecord{
		bool specified;
		DeclSeqConstTypeVarListMandatoryRecord *constTypeVarListPtr; /* undefined if specified==false */
	};

	struct DeclSeqRecord;
	
	struct ProcDeclRecord{
		OptionalReceiverRecord optionalReceiver;
		IdentDefRecord identDef;
		OptionalFormalParsRecord optionalFormalPars;
		DeclSeqRecord *declSeqPtr; 
	    bool procBodySpecifiedHere;
	    StatementSeqRecord procBodyStmtSeq; /* undefined if procBodySpecifiedHere==false */
	};

	enum DeclProcFwd {decl_proc,decl_fwd};
	
	struct DeclSeqProcDeclFwdDeclListMandatoryRecord{
		virtual DeclProcFwd get_decl_variant()=0;
		DeclSeqProcDeclFwdDeclListMandatoryRecord *next;
	}; 
	struct DeclSeqProcDecl : public DeclSeqProcDeclFwdDeclListMandatoryRecord{
		virtual DeclProcFwd get_decl_variant(){return decl_proc;}
		ProcDeclRecord procDecl; 
	}; 
	struct DeclSeqFwdDecl : public DeclSeqProcDeclFwdDeclListMandatoryRecord{
		virtual DeclProcFwd get_decl_variant(){return decl_fwd;}
		ForwardDeclRecord fwdDecl;
	}; 
	
	struct DeclSeqProcDeclFwdDeclListRecord{
		bool specified;
		DeclSeqProcDeclFwdDeclListMandatoryRecord *procDeclFwdDeclListPtr; /* undefined if specified==false */
	};
	
	struct DeclSeqRecord{
		DeclSeqConstTypeVarListRecord ctvList;
		DeclSeqProcDeclFwdDeclListRecord pfList;
	};

	struct TypeQualident: public TypeRecord{
		TypeNumberQARPPEnum getTypeNumber(){return type_number_Qualident;}
		QualidentRecord qualident;
	}; 
	struct TypeArrayConstExprListMandatoryRecord{
		ConstExprRecord dimensionConstExpr;
		TypeArrayConstExprListMandatoryRecord *next;
	};
	struct TypeARRAY: public TypeRecord{
		TypeNumberQARPPEnum getTypeNumber(){return type_number_ARRAY;}
		TypeArrayConstExprListMandatoryRecord *dimensionsConstExprsListPtr;
		TypeRecord *arrayElementTypePtr;
	}; 
	struct TypeRECORD: public TypeRecord{
		TypeNumberQARPPEnum getTypeNumber(){return type_number_RECORD;}
		QualidentRecord *optionalQualidentPtr;
		MandatoryFieldsListRecord fieldsList;
	}; 
	struct TypePOINTER: public TypeRecord{
		TypeNumberQARPPEnum getTypeNumber(){return type_number_POINTER;}
		TypeRecord *pointedTypePtr;
	}; 
	struct TypePROCEDURE: public TypeRecord{
		TypeNumberQARPPEnum getTypeNumber(){return type_number_PROCEDURE;}
		FormalParsRecord *optionalFormalParsPtr;
	}; 

	struct Stmt_EmptyStmt:public StatementRecord{
	  virtual StmtTypeNumberEnum getStatementTypeNumber(){return stmtTypeNumber_EmptyStmt;} 
	};
	struct Stmt_EXPR_OR_ASSIGN:public StatementRecord{
	  	virtual StmtTypeNumberEnum getStatementTypeNumber(){return stmtTypeNumber_EXPR_OR_ASSIGN;} 
	  	ExprRecord lhsExpr;
	  	bool assignment;
	  	ExprRecord rhsExpr; 
	};
	struct MandatoryELSIFsListRecord{
		ExprRecord expr;
		StatementSeqRecord thenStmtSeq; 
		MandatoryELSIFsListRecord *optionalElsifsListPtr;
	};
	struct Stmt_IF:public StatementRecord{
	 	virtual StmtTypeNumberEnum getStatementTypeNumber(){return stmtTypeNumber_IF;} 
	    ExprRecord expr;
		StatementSeqRecord thenStmtSeq;
		MandatoryELSIFsListRecord *optionalElsifsListPtr;
	    StatementSeqRecord *optionalElsePtr;
	};
	struct CaseLabelsRecord{
		ConstExprRecord constExpr1; 
		bool secondConstExprPresent;
		ConstExprRecord constExpr2;
	};
	struct CaseLabelsListsRecord{
		CaseLabelsRecord caseLabelsNth;
		CaseLabelsListsRecord *optionalFurtherCaseLabelsListsPtr;
	};
	struct CaseRecord{
		bool emptyCase;
		CaseLabelsListsRecord caseLabelsLists;
		StatementSeqRecord stmtSeq;
	};
	struct CasesRecord{
		CaseRecord caseNth;
		CasesRecord *optionalOtherCasesPtr;
	};
	struct Stmt_CASE:public StatementRecord{
	  	virtual StmtTypeNumberEnum getStatementTypeNumber(){return stmtTypeNumber_CASE;} 
		ExprRecord expr;
		CaseRecord caseFirst;
		CasesRecord *optionalOtherCasesPtr;
		StatementSeqRecord *optionalElsePtr;
	};
	struct Stmt_WHILE:public StatementRecord{
		virtual StmtTypeNumberEnum getStatementTypeNumber(){return stmtTypeNumber_WHILE;} 
	    ExprRecord expr;
	    StatementSeqRecord whileBodyStatementSeq;
	};
	struct Stmt_REPEAT:public StatementRecord{
		virtual StmtTypeNumberEnum getStatementTypeNumber(){return stmtTypeNumber_REPEAT;} 
	    StatementSeqRecord repeatBodyStatementSeq;
	    ExprRecord expr;
	};
	struct Stmt_FOR:public StatementRecord{
	  virtual StmtTypeNumberEnum getStatementTypeNumber(){return stmtTypeNumber_FOR;} 
	  identRec forCounterVariableName;
	  ExprRecord forCounterVariableInitialValueExpr;
	  ExprRecord forCounterVariableToValueExpr;
	  bool bySpecified;
	  ConstExprRecord byValueConstExpr; 
	  StatementSeqRecord forStatementSeq; 
	};
	struct Stmt_LOOP:public StatementRecord{
		virtual StmtTypeNumberEnum getStatementTypeNumber(){return stmtTypeNumber_LOOP;} 
	    StatementSeqRecord loopStatementSeq;
	};
	struct GuardRecord{
		QualidentRecord qualident1, qualident2;
	};
	struct FurtherWithClausesRecord{
		GuardRecord guard; 
		StatementSeqRecord statementSeq;
		FurtherWithClausesRecord *next;
	};
	struct Stmt_WITH:public StatementRecord{
		virtual StmtTypeNumberEnum getStatementTypeNumber(){return stmtTypeNumber_WITH;} 
	    GuardRecord firstGuard;
	    StatementSeqRecord firstStatementSeq;
		FurtherWithClausesRecord *optionalFurtherWithClausesPtr;
		StatementSeqRecord *optionalElsePtr;
	};
	struct Stmt_EXIT:public StatementRecord{
		virtual StmtTypeNumberEnum getStatementTypeNumber(){return stmtTypeNumber_EXIT;} 
	};
	struct Stmt_RETURN:public StatementRecord{
		virtual StmtTypeNumberEnum getStatementTypeNumber(){return stmtTypeNumber_RETURN;} 
		bool exprPresent;
		ExprRecord expr;
	};

	struct ModuleRecord{
		wchar_t* moduleName;
		ImportListRecord *importListPtr;
		DeclSeqRecord declSeq;
		StatementSeqRecord stmtSeq;
	};





	ModuleRecord *modulePtr;
	SymbolTable   *tab;
	CodeGenerator *gen;

	void Err(const wchar_t* msg) {
		errors->Error(la->line, la->col, msg);
	}

	void InitDeclarations() { // it must exist
	}


  
/*--------------------------------------------------------------------------*/


	Parser(Scanner *scanner);
	~Parser();
	void SemErr(const wchar_t* msg);

	void character();
	void number(numberRecord &r);
	void IntegerRec(wchar_t* &tok);
	void RealRec(wchar_t* &tok);
	void Relation(int &op);
	void AddOp(int &op);
	void MulOp(int &op);
	void Expr(ExprRecord &expr);
	void SimpleExpr(SimpleExprRecord &e);
	void ConstExpr(ConstExprRecord &cexpr);
	void ModuleImportEntry(ModuleImportEntryRecord &r);
	void Ident(wchar_t* &tok);
	void ModuleImportEntryList(ImportListRecord &r);
	void ImportList(ImportListRecord &r);
	void DeclSeqConstDeclListMandatory(DeclSeqConstDeclListMandatoryRecord &r);
	void ConstDecl(ConstDeclRecord &r);
	void DeclSeqConstDeclList(DeclSeqConstDeclListRecord &r);
	void DeclSeqTypeDeclListMandatory(DeclSeqTypeDeclListMandatoryRecord &r);
	void TypeDecl(TypeDeclRecord &r);
	void DeclSeqTypeDeclList(DeclSeqTypeDeclListRecord &r);
	void DeclSeqVarDeclListMandatory(DeclSeqVarDeclListMandatoryRecord &r);
	void VarDecl(VarDeclRecord &r);
	void DeclSeqVarDeclList(DeclSeqVarDeclListRecord &r);
	void DeclSeqConstTypeVarListMandatory(DeclSeqConstTypeVarListMandatoryRecord *&r);
	void DeclSeqConstTypeVarList(DeclSeqConstTypeVarListRecord &r);
	void DeclSeqProcDeclFwdDeclListMandatory(DeclSeqProcDeclFwdDeclListMandatoryRecord *&r);
	void ProcDecl(ProcDeclRecord &r);
	void ForwardDecl(ForwardDeclRecord &r);
	void DeclSeqProcDeclFwdDeclList(DeclSeqProcDeclFwdDeclListRecord *&r);
	void DeclSeq(DeclSeqRecord &r);
	void IdentDef(IdentDefRecord &r);
	void Type(TypeRecord *&ptrToTypeRecord);
	void IdentList(IdentListRecord &r);
	void OptionalReceiver(OptionalReceiverRecord &r);
	void Receiver(ReceiverRecord &r);
	void OptionalFormalPars(OptionalFormalParsRecord &r);
	void FormalPars(FormalParsRecord &r);
	void StatementSeq(StatementSeqRecord &r);
	void FPSectionsListMandatory(FPSectionsListMandatoryRecord &r);
	void FPSection(FPSectionRecord &r);
	void Qualident(QualidentRecord &r);
	void IdentList2(IdentList2Record &r);
	void TypeArrayConstExprListMandatory(TypeArrayConstExprListMandatoryRecord &r);
	void TypeArray(TypeARRAY &r);
	void MandatoryFieldsList(MandatoryFieldsListRecord &r);
	void FieldList(FieldListRecord &r);
	void TypeRecord_(TypeRECORD &r);
	void TypeProcedure(TypePROCEDURE &r);
	void Statement(StatementRecord*&ptrToStmtRecord);
	void CaseLabelsLists(CaseLabelsListsRecord &r);
	void CaseLabels(CaseLabelsRecord &r);
	void Case(CaseRecord &r);
	void Guard(GuardRecord &r);
	void SimpleExprAddOpClause(SimpleExprAddOpRecord &r);
	void Term(TermRecord &t);
	void TermMulOpClause(TermMulOpRecord &r);
	void Factor(FactorRecord *&factorPtr);
	void DesignatorMaybeWithExprList(DesignatorMaybeWithExprListRecord &r);
	void Character(wchar_t* &tok);
	void String(wchar_t* &tok);
	void Set(SetRecord &r);
	void DesignatorMaybeWithExprListRepeatingPartClause(DesignatorMaybeWithExprListRepeatingPartRecord *&r);
	void IdentRec(wchar_t* &tok);
	void ExprList(ExprListRecord &r);
	void QualidentOrOptionalExprList(QualidentOrOptionalExprListRecord &r);
	void ElementRangeList(SetRecord &r);
	void Element(ElementRangeRecord &r);
	void MandatoryELSIFsList(MandatoryELSIFsListRecord &r);
	void Cases(CasesRecord &r);
	void FurtherWithClauses(FurtherWithClausesRecord &r);
	void Module(ModuleRecord &r);
	void Integer(wchar_t* &tok);
	void Real(wchar_t* &tok);
	void Oberon();

	void Parse();

}; // end Parser

} // namespace


#endif

