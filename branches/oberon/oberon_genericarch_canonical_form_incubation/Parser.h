/*----------------------------------------------------------------------
Oberon2 compiler for x86
Copyright (c) 2012 Evgeniy Grigorievitch Philippov
Distributed under the terms of GNU General Public License, v.3 or later

Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/

#if !defined(Oberon_COCO_PARSER_H)
#define Oberon_COCO_PARSER_H

#include "common.h"

#include "stdio.h"
#include "wchar.h"

namespace Oberon {class CodeGenerator;class SymbolTable;}
#include "SymbolTable.h"
#include "CodeGenerator.h"

#include "Scanner.h"

namespace Oberon {

class Errors {
public:
	int count;			// number of errors detected

	Errors();
	void SynErr(int line, int col, int n);
	void Error(int line, int col, const wchar_t *s);
	void Warning(int line, int col, const wchar_t *s);
	void Warning(const wchar_t *s);
	void Exception(const wchar_t *s);

}; // Errors

class Parser {
//public:
	//void addParserListener(const ParserListener *const parserListener){this->parserListener=parserListener;}
private:
	enum {
		_EOF=0,
		_ident=1,
		_badString=2,
		_string=3,
		_integer=4,
		_real=5
	};
	int maxT;

	//const ParserListener *parserListener;
	Token *dummyToken;
	int errDist;
	int minErrDist;

	void SynErr(int n);
	void Get();
	void Expect(int n);
	bool StartOf(int s);
	void ExpectWeak(int n, int follow);
	bool WeakSeparator(int n, int syFol, int repFol);

public:
	Scanner *scanner;
	Errors  *errors;

	Token *t;			// last recognized token
	Token *la;			// lookahead token

ModuleRecord *modulePtr;
	SymbolTable   *tab;
	CodeGenerator *gen;

	void Err(const wchar_t* msg) {
		errors->Error(la->line, la->col, msg);
	}

	void InitDeclarations() { // it must exist
	}


  
/*--------------------------------------------------------------------------*/


	Parser(Scanner *scanner);
	~Parser();
	void SemErr(const wchar_t* msg);

	void character();
	void number(numberRecord &r);
	void IntegerRec(wchar_t* &tok);
	void RealRec(wchar_t* &tok);
	void Relation(int &op);
	void AddOp(int &op);
	void MulOp(int &op);
	void Expr(ExprRecord &expr);
	void SimpleExpr(SimpleExprRecord &e);
	void ConstExpr(ConstExprRecord &cexpr);
	void ModuleImportEntry(ModuleImportEntryRecord &r);
	void Ident(wchar_t* &tok);
	void ModuleImportEntryList(ImportListRecord &r);
	void ImportList(ImportListRecord &r);
	void DeclSeqConstDeclListMandatory(DeclSeqConstDeclListMandatoryRecord &r);
	void ConstDecl(ConstDeclRecord &r);
	void DeclSeqConstDeclList(DeclSeqConstDeclListRecord &r);
	void DeclSeqTypeDeclListMandatory(DeclSeqTypeDeclListMandatoryRecord &r);
	void TypeDecl(TypeDeclRecord &r);
	void DeclSeqTypeDeclList(DeclSeqTypeDeclListRecord &r);
	void DeclSeqVarDeclListMandatory(DeclSeqVarDeclListMandatoryRecord &r);
	void VarDecl(VarDeclRecord &r);
	void DeclSeqVarDeclList(DeclSeqVarDeclListRecord &r);
	void DeclSeqConstTypeVarListMandatory(DeclSeqConstTypeVarListMandatoryRecord *&r);
	void DeclSeqConstTypeVarList(DeclSeqConstTypeVarListRecord &r);
	void DeclSeqProcDeclFwdDeclListMandatory(DeclSeqProcDeclFwdDeclListMandatoryRecord *&r);
	void ProcDecl(ProcDeclRecord &r);
	void ForwardDecl(ForwardDeclRecord &r);
	void DeclSeqProcDeclFwdDeclList(DeclSeqProcDeclFwdDeclListRecord &r);
	void DeclSeq(DeclSeqRecord &r);
	void IdentDef(IdentDefRecord &r);
	void Type(TypeRecord *&ptrToTypeRecord);
	void IdentList(IdentListRecord &r);
	void OptionalReceiver(OptionalReceiverRecord &r);
	void Receiver(ReceiverRecord &r);
	void OptionalFormalPars(OptionalFormalParsRecord &r);
	void FormalPars(FormalParsRecord &r);
	void StatementSeq(StatementSeqRecord &r);
	void FPSectionsListMandatory(FPSectionsListMandatoryRecord &r);
	void FPSection(FPSectionRecord &r);
	void Qualident(QualidentRecord &r);
	void IdentList2(IdentList2Record &r);
	void TypeArrayConstExprListMandatory(TypeArrayConstExprListMandatoryRecord &r);
	void TypeArray(TypeARRAY &r);
	void MandatoryFieldsList(MandatoryFieldsListRecord &r);
	void FieldList(FieldListRecord &r);
	void TypeRecord_(TypeRECORD &r);
	void TypeProcedure(TypePROCEDURE &r);
	void Statement(StatementRecord*&ptrToStmtRecord);
	void CaseLabelsLists(CaseLabelsListsRecord &r);
	void CaseLabels(CaseLabelsRecord &r);
	void Case(CaseRecord &r);
	void Guard(GuardRecord &r);
	void SimpleExprAddOpClause(SimpleExprAddOpRecord &r);
	void Term(TermRecord &t);
	void TermMulOpClause(TermMulOpRecord &r);
	void Factor(FactorRecord *&factorPtr);
	void DesignatorMaybeWithExprList(DesignatorMaybeWithExprListRecord &r);
	void Character(wchar_t* &tok);
	void String(wchar_t* &tok);
	void Set(SetRecord &r);
	void DesignatorMaybeWithExprListRepeatingPartClause(DesignatorMaybeWithExprListRepeatingPartRecord *&r);
	void IdentRec(wchar_t* &tok);
	void ExprList(ExprListRecord &r);
	void QualidentOrOptionalExprList(QualidentOrOptionalExprListRecord &r);
	void ElementRangeList(SetRecord &r);
	void Element(ElementRangeRecord &r);
	void MandatoryELSIFsList(MandatoryELSIFsListRecord &r);
	void Cases(CasesRecord &r);
	void FurtherWithClauses(FurtherWithClausesRecord &r);
	void Module(ModuleRecord &r);
	void Integer(wchar_t* &tok);
	void Real(wchar_t* &tok);
	void Oberon();

	void Parse();

}; // end Parser

} // namespace


#endif

