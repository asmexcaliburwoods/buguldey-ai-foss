  TPMsgArray = class(TBaseArray)
  public
    constructor Create(itemcount, dummy: Integer); override;
    function Add(Value: PMsg): Integer;
    function Find(var Index: Integer; Value: PMsg): Boolean;
    function IndexOf(var Item): Integer; override;
    procedure Assign(Source: TPersistent); override;
    property Items[Index: Integer]: PMsg read GetItem; default;
  end;

type
  TDArray = array[0..High(Integer) div Sizeof(PMsg)-1] of PMsg;
  PPMsgArray = ^TDArray;

constructor TPMsgArray.Create(itemcount, dummy: Integer);
begin
  inherited Create(itemcount, Sizeof(PMsg));
  FCompProc := CmpPMsg;
end;

function TPMsgArray.GetItem(index: Integer): PMsg;
begin
  Result := 0;
  if ValidIndex(index) then
  begin
    try
      Result := PPMsgArray(FMemory)^[index];
    except
      InternalHandleException;
    end;
  end;
end;

function TPMsgArray.Add(Value: PMsg): Integer;
begin
  if (SortOrder = tsNone) then
    Result := FCount
  else
    if Find(Result, Value) then
      case Duplicates of
        dupIgnore : Exit;
        dupError  : ArrayDuplicateError;
      end;
  InsertAt(Result, Value);
end;

procedure TPMsgArray.Assign(Source: TPersistent);
var
  I: Integer;  
begin
  if (Source is TPMsgArray) then
  begin
    try
      Clear;
      for I := 0 to TBaseArray(Source).Count - 1 do
        Add(TPMsgArray(Source)[I]);
    finally
    end;
    Exit;
  end;
  inherited Assign(Source);
end;

function TPMsgArray.Find(var Index: Integer; Value: PMsg): Boolean;
var
  L, H, I, C: Integer;
  Value2: PMsg; 
begin
  Result := False;
  L := 0;
  H := Count - 1;
  while (L <= H) do
  begin
    I := (L + H) shr 1;
    Value2 := GetItem(I);
    C := FCompProc(Value2, Value);
    if (C < 0) then
      L := I + 1
    else
    begin
      H := I - 1;
      if (C = 0) then
      begin
        Result := True;
        if (Duplicates <> dupAccept) then
          L := I;
      end;
    end;
  end;
  Index := L;
end;