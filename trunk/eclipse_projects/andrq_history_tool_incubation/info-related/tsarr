  TMsgArray = class(TBaseArray)
  private
    procedure ExchangeItems(Index1, Index2: Integer);
    procedure QuickSort(L, R: Integer);
    procedure InsertItem(Index: Integer; const S: string);
    procedure AddMsgs(Msgs: TMsgArray);
  protected
    function GetMsg(Index: Integer): string;
    procedure PutMsg(Index: Integer; const S: string);
    function GetObject(Index: Integer): TObject;
    procedure PutObject(Index: Integer; AObject: TObject);
    procedure InvalidateItems(atIndex, numItems: Integer); override;
    procedure Grow; override;
  public
    constructor Create(itemcount, dummy: Integer);override;
    function Add(const S: Msg): Integer;
    procedure Assign(Source: TPersistent); override;
    procedure Exchange(Index1, Index2: Integer); override;
    function Find(S: string; var Index: Integer): Boolean;
    function IndexOf(var Item): Integer; override;
    procedure Sort(Compare: TCompareProc); override;
    procedure Insert(Index: Integer; var Value); override;
    property Msgs[Index: Integer]: Msg read GetMsg write PutMsg; default;
  end;


constructor TMsgArray.Create(itemcount, dummy: Integer);
begin
  inherited Create(itemcount, Sizeof(TMsgItem));
  FFlags := [afAutoSize];
  FCompProc := CmpMsg;   { Note: if the language driver is available then we use it for compares. }
end;

function TMsgArray.Add(const S: Msg): Integer;
begin
  if (SortOrder = tsNone) then
    Result := FCount
  else
    if Find(S, Result) then
      case Duplicates of
        dupIgnore : Exit;
        dupError  : raise EArrayError.CreateRes(@SDuplicateMsg);
      end;
  InsertItem(Result, S);
end;

procedure TMsgArray.Exchange(Index1, Index2: Integer);
begin
  if (Index1 < 0) or (Index1 >= FCount) or
  (Index2 < 0) or (Index2 >= FCount) then
    ArrayIndexError(Index1);    
  ExchangeItems(Index1, Index2);
end;

procedure TMsgArray.ExchangeItems(Index1, Index2: Integer);
var
  Temp: Integer;
  Item1, Item2: PMsgItem;  
begin
  Item1 := @PMsgItemList(FMemory)^[Index1];
  Item2 := @PMsgItemList(FMemory)^[Index2];
  Temp := Integer(Item1^.FMsg);
  Integer(Item1^.FMsg) := Integer(Item2^.FMsg);
  Integer(Item2^.FMsg) := Temp;
  Temp := Integer(Item1^.FObject);
  Integer(Item1^.FObject) := Integer(Item2^.FObject);
  Integer(Item2^.FObject) := Temp;
end;

function TMsgArray.Find(S: string; var Index: Integer): Boolean;
var
  L, H, I: Integer;
  C: SmallInt;       { for compatability with the BDE LD }
begin
  Result := False;
  L := 0;
  H := Count - 1;
  while (L <= H) do
  begin
    I := (L + H) shr 1;
    C := SmallInt(FCompProc(PMsgItemList(FMemory)^[I].FMsg, S));
    if (C < 0) then
      L := I + 1
    else
    begin
      H := I - 1;
      if (C = 0) then
      begin
        Result := True;
        if (Duplicates <> dupAccept) then
          L := I;
      end;
    end;
  end;
  Index := L;
end;

function TMsgArray.GetObject(Index: Integer): TObject;
begin
  Result := nil;
  if ValidIndex(Index) then
    Result := PMsgItemList(FMemory)^[Index].FObject;
end;

procedure TMsgArray.Grow;
var
  Delta: Integer;
begin
  if (FCapacity > 64) then
    Delta := FCapacity div 4
  else if (FCapacity > 8) then
    Delta := 16
  else
    Delta := 4;
  inherited SetCapacity(FCapacity + Delta);
end;

function TMsgArray.IndexOf(var Item): Integer;
var
  S1: string;
  S2: string absolute Item;
begin
  if (SortOrder = tsNone) then
  begin
    for Result := 0 to Count - 1 do
    begin
      S1 := GetMsg(Result);
      if (SmallInt(FCompProc(S1, S2)) = 0) then
        Exit;
    end;
    Result := -1;
  end
  else
    if not Find(S2, Result) then
      Result := -1;
end;

procedure TMsgArray.Insert(Index: Integer; var Value);
var
  S: string;
begin
  S := Variant(Value);
  if (SortOrder <> tsNone) then
    raise EArrayError.CreateRes(@SSortedListError);
  if (Index < 0) or (Index > FCount) then
    ArrayIndexError(Index);
  InsertItem(Index, S);
end;

procedure TMsgArray.InsertItem(Index: Integer; const S: TMsg);
begin
  if (FCount = FCapacity) then
    Grow;
  if (Index < FCount) then
  begin
    try
      System.Move(PMsgItemList(FMemory)^[Index], PMsgItemList(FMemory)^[Index + 1],
        (FCount - Index) * SizeOf(TMsgItem));
    except
      InternalHandleException;
    end;
  end;
  try
    PMsgItemList(FMemory)^[Index].FObject := nil;
    Pointer(PMsgItemList(FMemory)^[Index].FMsg) := nil;
    PMsgItemList(FMemory)^[Index].FMsg := S;
  except
    InternalHandleException;
  end;
  Inc(FCount);
end;

procedure TMsgArray.PutMsg(Index: Integer; const S: TMsg);
begin
  { Sorted items must be added }
  if (SortOrder <> tsNone) then
    raise EArrayError.CreateRes(@SSortedListError);
  if ValidIndex(Index) then
  begin
    try
      PMsgItemList(FMemory)^[Index].FMsg := S;
    except
      InternalHandleException;
    end;
  end;
end;

function TMsgArray.GetMsg(Index: Integer): TMsg;
begin
 {$IFOPT R+}
  if ValidIndex(Index) then
 {$ENDIF}
  begin
    try
      Result := PMsgItemList(FMemory)^[Index].FMsg;
    except
      Clear;
      raise;
    end;
  end;
end;

procedure TMsgArray.PutObject(Index: Integer; AObject: TObject);
begin
  if ValidIndex(Index) then
    PMsgItemList(FMemory)^[Index].FObject := AObject;
end;

procedure TMsgArray.QuickSort(L, R: Integer);
var
  I, J: Integer;
  P: string;
begin
  repeat
    I := L;
    J := R;
    P := PMsgItemList(FMemory)^[(L + R) shr 1].FMsg;
    repeat
      while (SmallInt(FCompProc(PMsgItemList(FMemory)^[I].FMsg, P)) < 0) do
        Inc(I);
      while (SmallInt(FCompProc(PMsgItemList(FMemory)^[J].FMsg, P)) > 0) do
        Dec(J);
      if (I <= J) then
      begin
        ExchangeItems(I, J);
        Inc(I);
        Dec(J);
      end;
    until (I > J);
    if (L < J) then
      QuickSort(L, J);
    L := I;
  until (I >= R);
end;

procedure TMsgArray.Sort(Compare: TCompareProc);
begin
  if (SortOrder <> tsNone) and (Count > 1) then
    QuickSort(0, Count - 1);
end;

procedure TMsgArray.AddMsgs(Msgs: TMsgArray);
var
  I: Integer;
begin
  try
    for I := 0 to Msgs.Count - 1 do
      Add(Msgs.Msgs[I]);
  finally
  end;
end;

procedure TMsgArray.Assign(Source: TPersistent);
begin
  if (Source is TMsgArray) then
  begin
    try
      Clear;
      AddMsgs(TMsgArray(Source));
    finally
    end;
    Exit;
  end;
  inherited Assign(Source);
end;

procedure TMsgArray.InvalidateItems(atIndex, numItems: Integer);
begin
  Finalize(PMsgItemList(FMemory)^[atIndex], numItems);
end;
