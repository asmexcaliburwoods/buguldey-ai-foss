/*----------------------------------------------------------------------
Oberon2 compiler for x86
Copyright (c) 2012 Evgeniy Grigorievitch Philippov
Distributed under the terms of GNU General Public License, v.3 or later

Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/


#include <wchar.h>
#include "Parser.h"
#include "Scanner.h"


namespace Oberon {


void Parser::SynErr(int n) {
	//if (errDist >= minErrDist)
		errors->SynErr(la->line, la->col, n);
	errDist = 0;
}

void Parser::SemErr(const wchar_t* msg) {
	//if (errDist >= minErrDist)
		errors->Error(t->line, t->col, msg);
	errDist = 0;
}

void Parser::Get() {
	for (;;) {
		t = la;
		la = scanner->Scan();
		if (la->kind <= maxT) { ++errDist; break; }

		if (dummyToken != t) {
			dummyToken->kind = t->kind;
			dummyToken->pos = t->pos;
			dummyToken->col = t->col;
			dummyToken->line = t->line;
			dummyToken->next = NULL;
			coco_string_delete(dummyToken->val);
			dummyToken->val = coco_string_create(t->val);
			t = dummyToken;
		}
		la = t;
	}
}

void Parser::Expect(int n) {
	if (la->kind==n) Get(); else { SynErr(n); }
}

void Parser::ExpectWeak(int n, int follow) {
	if (la->kind == n) Get();
	else {
		SynErr(n);
		while (!StartOf(follow)) Get();
	}
}

bool Parser::WeakSeparator(int n, int syFol, int repFol) {
	if (la->kind == n) {Get(); return true;}
	else if (StartOf(repFol)) {return false;}
	else {
		SynErr(n);
		while (!(StartOf(syFol) || StartOf(repFol) || StartOf(0))) {
			Get();
		}
		return StartOf(syFol);
	}
}

void Parser::number() {
		if (la->kind == _integer) {
			Get();
		} else if (la->kind == _real) {
			Get();
		} else SynErr(68);
}

void Parser::Relation(int &op) {
		op = illegal_operator; 
		switch (la->kind) {
		case 7 /* "=" */: {
			Get();
			op = equals; 
			break;
		}
		case 8 /* "#" */: {
			Get();
			op = notEquals; 
			break;
		}
		case 9 /* "<" */: {
			Get();
			op = less; 
			break;
		}
		case 10 /* "<=" */: {
			Get();
			op = lessOrEqual; 
			break;
		}
		case 11 /* ">" */: {
			Get();
			op = greater; 
			break;
		}
		case 12 /* ">=" */: {
			Get();
			op = greaterOrEqual; 
			break;
		}
		case 13 /* "IN" */: {
			Get();
			op = in; 
			break;
		}
		case 14 /* "IS" */: {
			Get();
			op = is; 
			break;
		}
		default: SynErr(69); break;
		}
}

void Parser::AddOp(int &op) {
		op = illegal_operator; 
		if (la->kind == 15 /* "+" */) {
			Get();
			op = plus; 
		} else if (la->kind == 16 /* "-" */) {
			Get();
			op = minus; 
		} else if (la->kind == 17 /* "OR" */) {
			Get();
			op = orOperation; 
		} else SynErr(70);
}

void Parser::MulOp(int &op) {
		op = illegal_operator; 
		if (la->kind == 18 /* "*" */) {
			Get();
			op = times; 
		} else if (la->kind == 19 /* "/" */) {
			Get();
			op = slash; 
		} else if (la->kind == 20 /* "DIV" */) {
			Get();
			op = divOp; 
		} else if (la->kind == 21 /* "MOD" */) {
			Get();
			op = modOp; 
		} else if (la->kind == 22 /* "&" */) {
			Get();
			op = ampersand; 
		} else SynErr(71);
}

void Parser::Expr(ExprParams *expr) {
		ExprParams *expr1; ExprParams *expr2; int op; int type, type1; 
		SimpleExpr(expr1);
		if (StartOf(1)) {
			Relation(op);
			SimpleExpr(expr2);
			if (type != type1) Err(L"incompatible types");
			   			   gen->Emit(op); type = boolean; /*TODO not always boolean*/ 
			 		
		}
}

void Parser::SimpleExpr(ExprParams *expr) {
		int op; 
		if (la->kind == 15 /* "+" */ || la->kind == 16 /* "-" */) {
			if (la->kind == 15 /* "+" */) {
				Get();
			} else {
				Get();
			}
		}
		Term();
		while (la->kind == 15 /* "+" */ || la->kind == 16 /* "-" */ || la->kind == 17 /* "OR" */) {
			AddOp(op);
			Term();
		}
}

void Parser::ConstExpr(ExprParams *expr) {
		Expr(expr);
}

void Parser::ImportList() {
		Expect(23 /* "IMPORT" */);
		Expect(_ident);
		if (la->kind == 24 /* ":=" */) {
			Get();
			Expect(_ident);
		}
		while (la->kind == 25 /* "," */) {
			Get();
			Expect(_ident);
			if (la->kind == 24 /* ":=" */) {
				Get();
				Expect(_ident);
			}
		}
		Expect(26 /* ";" */);
}

void Parser::DeclSeq() {
		while (la->kind == 27 /* "CONST" */ || la->kind == 28 /* "TYPE" */ || la->kind == 29 /* "VAR" */) {
			if (la->kind == 27 /* "CONST" */) {
				Get();
				while (la->kind == _ident) {
					ConstDecl();
					Expect(26 /* ";" */);
				}
			} else if (la->kind == 28 /* "TYPE" */) {
				Get();
				while (la->kind == _ident) {
					TypeDecl();
					Expect(26 /* ";" */);
				}
			} else {
				Get();
				while (la->kind == _ident) {
					VarDecl();
					Expect(26 /* ";" */);
				}
			}
		}
		while (la->kind == 30 /* "PROCEDURE" */) {
			Get();
			if (la->kind == _ident || la->kind == 35 /* "(" */) {
				ProcDecl();
			} else if (la->kind == 34 /* "^" */) {
				ForwardDecl();
			} else SynErr(72);
			Expect(26 /* ";" */);
		}
}

void Parser::ConstDecl() {
		ExprParams *expr; 
		IdentDef();
		Expect(7 /* "=" */);
		ConstExpr(expr);
}

void Parser::TypeDecl() {
		IdentDef();
		Expect(7 /* "=" */);
		Type();
}

void Parser::VarDecl() {
		IdentList();
		Expect(31 /* ":" */);
		Type();
}

void Parser::ProcDecl() {
		if (la->kind == 35 /* "(" */) {
			Receiver();
		}
		IdentDef();
		if (la->kind == 35 /* "(" */) {
			FormalPars();
		}
		Expect(26 /* ";" */);
		DeclSeq();
		if (la->kind == 32 /* "BEGIN" */) {
			Get();
			StatementSeq();
		}
		Expect(33 /* "END" */);
		Expect(_ident);
}

void Parser::ForwardDecl() {
		Expect(34 /* "^" */);
		if (la->kind == 35 /* "(" */) {
			Receiver();
		}
		IdentDef();
		if (la->kind == 35 /* "(" */) {
			FormalPars();
		}
}

void Parser::IdentDef() {
		Expect(_ident);
		if (la->kind == 16 /* "-" */ || la->kind == 18 /* "*" */) {
			if (la->kind == 18 /* "*" */) {
				Get();
			} else {
				Get();
			}
		}
}

void Parser::Type() {
		ExprParams* expr; 
		if (la->kind == _ident) {
			Qualident();
		} else if (la->kind == 37 /* "ARRAY" */) {
			Get();
			if (StartOf(2)) {
				ConstExpr(expr);
				while (la->kind == 25 /* "," */) {
					Get();
					ConstExpr(expr);
				}
			}
			Expect(38 /* "OF" */);
			Type();
		} else if (la->kind == 39 /* "RECORD" */) {
			Get();
			if (la->kind == 35 /* "(" */) {
				Get();
				Qualident();
				Expect(36 /* ")" */);
			}
			FieldList();
			while (la->kind == 26 /* ";" */) {
				Get();
				FieldList();
			}
			Expect(33 /* "END" */);
		} else if (la->kind == 40 /* "POINTER" */) {
			Get();
			Expect(41 /* "TO" */);
			Type();
		} else if (la->kind == 30 /* "PROCEDURE" */) {
			Get();
			if (la->kind == 35 /* "(" */) {
				FormalPars();
			}
		} else SynErr(73);
}

void Parser::IdentList() {
		IdentDef();
		while (la->kind == 25 /* "," */) {
			Get();
			IdentDef();
		}
}

void Parser::Receiver() {
		Expect(35 /* "(" */);
		if (la->kind == 29 /* "VAR" */) {
			Get();
		}
		Expect(_ident);
		Expect(31 /* ":" */);
		Expect(_ident);
		Expect(36 /* ")" */);
}

void Parser::FormalPars() {
		Expect(35 /* "(" */);
		if (la->kind == _ident || la->kind == 29 /* "VAR" */) {
			FPSection();
			while (la->kind == 26 /* ";" */) {
				Get();
				FPSection();
			}
		}
		Expect(36 /* ")" */);
		if (la->kind == 31 /* ":" */) {
			Get();
			Qualident();
		}
}

void Parser::StatementSeq() {
		Statement();
		while (la->kind == 26 /* ";" */) {
			Get();
			Statement();
		}
}

void Parser::FPSection() {
		if (la->kind == 29 /* "VAR" */) {
			Get();
		}
		Expect(_ident);
		while (la->kind == 25 /* "," */) {
			Get();
			Expect(_ident);
		}
		Expect(31 /* ":" */);
		Type();
}

void Parser::Qualident() {
		Expect(_ident);
		if (la->kind == 45 /* "." */) {
			Get();
			Expect(_ident);
		}
}

void Parser::FieldList() {
		if (la->kind == _ident) {
			IdentList();
			Expect(31 /* ":" */);
			Type();
		}
}

void Parser::Statement() {
		ExprParams *expr; 
		if (StartOf(3)) {
			switch (la->kind) {
			case _ident: case _string: case _integer: case _real: case _character: case 15 /* "+" */: case 16 /* "-" */: case 35 /* "(" */: case 43 /* "NIL" */: case 44 /* "~" */: case 48 /* "{" */: {
				Expr(expr);
				if (la->kind == 24 /* ":=" */) {
					Get();
					Expr(expr);
				}
				break;
			}
			case 50 /* "IF" */: {
				Get();
				Expr(expr);
				Expect(51 /* "THEN" */);
				StatementSeq();
				while (la->kind == 52 /* "ELSIF" */) {
					Get();
					Expr(expr);
					Expect(51 /* "THEN" */);
					StatementSeq();
				}
				if (la->kind == 53 /* "ELSE" */) {
					Get();
					StatementSeq();
				}
				Expect(33 /* "END" */);
				break;
			}
			case 54 /* "CASE" */: {
				Get();
				Expr(expr);
				Expect(38 /* "OF" */);
				Case();
				while (la->kind == 55 /* "|" */) {
					Get();
					Case();
				}
				if (la->kind == 53 /* "ELSE" */) {
					Get();
					StatementSeq();
				}
				Expect(33 /* "END" */);
				break;
			}
			case 56 /* "WHILE" */: {
				Get();
				Expr(expr);
				Expect(57 /* "DO" */);
				StatementSeq();
				Expect(33 /* "END" */);
				break;
			}
			case 58 /* "REPEAT" */: {
				Get();
				StatementSeq();
				Expect(59 /* "UNTIL" */);
				Expr(expr);
				break;
			}
			case 60 /* "FOR" */: {
				Get();
				Expect(_ident);
				Expect(24 /* ":=" */);
				Expr(expr);
				Expect(41 /* "TO" */);
				Expr(expr);
				if (la->kind == 61 /* "BY" */) {
					Get();
					ConstExpr(expr);
				}
				Expect(57 /* "DO" */);
				StatementSeq();
				Expect(33 /* "END" */);
				break;
			}
			case 62 /* "LOOP" */: {
				Get();
				StatementSeq();
				Expect(33 /* "END" */);
				break;
			}
			case 63 /* "WITH" */: {
				Get();
				Guard();
				Expect(57 /* "DO" */);
				StatementSeq();
				while (la->kind == 55 /* "|" */) {
					Get();
					Guard();
					Expect(57 /* "DO" */);
					StatementSeq();
				}
				if (la->kind == 53 /* "ELSE" */) {
					Get();
					StatementSeq();
				}
				Expect(33 /* "END" */);
				break;
			}
			case 64 /* "EXIT" */: {
				Get();
				break;
			}
			case 65 /* "RETURN" */: {
				Get();
				if (StartOf(2)) {
					Expr(expr);
				}
				break;
			}
			}
		}
}

void Parser::Case() {
		if (StartOf(2)) {
			CaseLabels();
			while (la->kind == 25 /* "," */) {
				Get();
				CaseLabels();
			}
			Expect(31 /* ":" */);
			StatementSeq();
		}
}

void Parser::CaseLabels() {
		ExprParams* expr; 
		ConstExpr(expr);
		if (la->kind == 42 /* ".." */) {
			Get();
			ConstExpr(expr);
		}
}

void Parser::Guard() {
		Qualident();
		Expect(31 /* ":" */);
		Qualident();
}

void Parser::Term() {
		int op; 
		Factor();
		while (StartOf(4)) {
			MulOp(op);
			Factor();
		}
}

void Parser::Factor() {
		int type; int n; Obj *obj; wchar_t* name; ExprParams* expr; 
		switch (la->kind) {
		case _ident: {
			type = undef; 
			DesignatorMaybeWithExprList();
			break;
		}
		case _integer: case _real: {
			number();
			break;
		}
		case _character: {
			Get();
			break;
		}
		case _string: {
			Get();
			break;
		}
		case 43 /* "NIL" */: {
			Get();
			break;
		}
		case 48 /* "{" */: {
			Set();
			break;
		}
		case 35 /* "(" */: {
			Get();
			Expr(expr);
			Expect(36 /* ")" */);
			break;
		}
		case 44 /* "~" */: {
			Get();
			Factor();
			break;
		}
		default: SynErr(74); break;
		}
}

void Parser::DesignatorMaybeWithExprList() {
		Expect(_ident);
		while (StartOf(5)) {
			if (la->kind == 45 /* "." */) {
				Get();
				Expect(_ident);
			} else if (la->kind == 46 /* "[" */) {
				Get();
				ExprList();
				Expect(47 /* "]" */);
			} else if (la->kind == 34 /* "^" */) {
				Get();
			} else {
				Get();
				QualidentOrOptionalExprList();
				Expect(36 /* ")" */);
			}
		}
}

void Parser::Set() {
		Expect(48 /* "{" */);
		if (StartOf(2)) {
			Element();
			while (la->kind == 25 /* "," */) {
				Get();
				Element();
			}
		}
		Expect(49 /* "}" */);
}

void Parser::ExprList() {
		ExprParams* expr; 
		Expr(expr);
		while (la->kind == 25 /* "," */) {
			Get();
			Expr(expr);
		}
}

void Parser::QualidentOrOptionalExprList() {
		if (StartOf(2)) {
			ExprList();
		}
}

void Parser::Element() {
		ExprParams* expr; 
		Expr(expr);
		if (la->kind == 42 /* ".." */) {
			Get();
			Expr(expr);
		}
}

void Parser::Module() {
		wchar_t*name; 
		tab->OpenScope(); 
		Expect(66 /* "MODULE" */);
		Ident(name);
		Expect(26 /* ";" */);
		if (la->kind == 23 /* "IMPORT" */) {
			ImportList();
		}
		DeclSeq();
		if (la->kind == 32 /* "BEGIN" */) {
			Get();
			StatementSeq();
		}
		Expect(33 /* "END" */);
		Expect(_ident);
		Expect(45 /* "." */);
		tab->CloseScope(); wprintf(L"MODULE %ls\n",name); coco_string_delete(name); gen->Emit(JMP, -1); 
		/*FILE_TYPE_ptr_address=gen->pc; gen->Emit(MODULE);*/ gen->Emit(0); 
}

void Parser::Ident(wchar_t* &name) {
		Expect(_ident);
		name = coco_string_create(t->val); 
}

void Parser::Oberon() {
		InitDeclarations(); 
		Module();
}




// If the user declared a method Init and a mehtod Destroy they should
// be called in the contructur and the destructor respctively.
//
// The following templates are used to recognize if the user declared
// the methods Init and Destroy.

template<typename T>
struct ParserInitExistsRecognizer {
	template<typename U, void (U::*)() = &U::Init>
	struct ExistsIfInitIsDefinedMarker{};

	struct InitIsMissingType {
		char dummy1;
	};
	
	struct InitExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static InitIsMissingType is_here(...);

	// exist only if ExistsIfInitIsDefinedMarker is defined
	template<typename U>
	static InitExistsType is_here(ExistsIfInitIsDefinedMarker<U>*);

	enum { InitExists = (sizeof(is_here<T>(NULL)) == sizeof(InitExistsType)) };
};

template<typename T>
struct ParserDestroyExistsRecognizer {
	template<typename U, void (U::*)() = &U::Destroy>
	struct ExistsIfDestroyIsDefinedMarker{};

	struct DestroyIsMissingType {
		char dummy1;
	};
	
	struct DestroyExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static DestroyIsMissingType is_here(...);

	// exist only if ExistsIfDestroyIsDefinedMarker is defined
	template<typename U>
	static DestroyExistsType is_here(ExistsIfDestroyIsDefinedMarker<U>*);

	enum { DestroyExists = (sizeof(is_here<T>(NULL)) == sizeof(DestroyExistsType)) };
};

// The folloing templates are used to call the Init and Destroy methods if they exist.

// Generic case of the ParserInitCaller, gets used if the Init method is missing
template<typename T, bool = ParserInitExistsRecognizer<T>::InitExists>
struct ParserInitCaller {
	static void CallInit(T *t) {
		// nothing to do
	}
};

// True case of the ParserInitCaller, gets used if the Init method exists
template<typename T>
struct ParserInitCaller<T, true> {
	static void CallInit(T *t) {
		t->Init();
	}
};

// Generic case of the ParserDestroyCaller, gets used if the Destroy method is missing
template<typename T, bool = ParserDestroyExistsRecognizer<T>::DestroyExists>
struct ParserDestroyCaller {
	static void CallDestroy(T *t) {
		// nothing to do
	}
};

// True case of the ParserDestroyCaller, gets used if the Destroy method exists
template<typename T>
struct ParserDestroyCaller<T, true> {
	static void CallDestroy(T *t) {
		t->Destroy();
	}
};

void Parser::Parse() {
	t = NULL;
	la = dummyToken = new Token();
	la->val = coco_string_create(L"Dummy Token");
	Get();
	Oberon();
	Expect(0);
}

Parser::Parser(Scanner *scanner) {
	//parserListener=0;
	maxT = 67;

	ParserInitCaller<Parser>::CallInit(this);
	dummyToken = NULL;
	t = la = NULL;
	minErrDist = 2;
	errDist = minErrDist;
	this->scanner = scanner;
	errors = new Errors();
}

bool Parser::StartOf(int s) {
	const bool T = true;
	const bool x = false;

	static bool set[6][69] = {
		{T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,T, T,T,T,T, T,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,T,x,T, T,T,T,x, x,x,x,x, x,x,x,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,T, T,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,T,x,T, T,T,T,x, x,x,x,x, x,x,x,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,T, T,x,x,x, T,x,T,x, x,x,T,x, T,x,T,x, T,x,T,T, T,T,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, T,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, x,x,x,x, x,x,x,x, x,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x}
	};



	return set[s][la->kind];
}

Parser::~Parser() {
	ParserDestroyCaller<Parser>::CallDestroy(this);
	delete errors;
	delete dummyToken;
}

Errors::Errors() {
	count = 0;
}

void Errors::SynErr(int line, int col, int n) {
	wchar_t* s;
	switch (n) {
			case 0: s = coco_string_create(L"EOF expected"); break;
			case 1: s = coco_string_create(L"ident expected"); break;
			case 2: s = coco_string_create(L"badString expected"); break;
			case 3: s = coco_string_create(L"string expected"); break;
			case 4: s = coco_string_create(L"integer expected"); break;
			case 5: s = coco_string_create(L"real expected"); break;
			case 6: s = coco_string_create(L"character expected"); break;
			case 7: s = coco_string_create(L"\"=\" expected"); break;
			case 8: s = coco_string_create(L"\"#\" expected"); break;
			case 9: s = coco_string_create(L"\"<\" expected"); break;
			case 10: s = coco_string_create(L"\"<=\" expected"); break;
			case 11: s = coco_string_create(L"\">\" expected"); break;
			case 12: s = coco_string_create(L"\">=\" expected"); break;
			case 13: s = coco_string_create(L"\"IN\" expected"); break;
			case 14: s = coco_string_create(L"\"IS\" expected"); break;
			case 15: s = coco_string_create(L"\"+\" expected"); break;
			case 16: s = coco_string_create(L"\"-\" expected"); break;
			case 17: s = coco_string_create(L"\"OR\" expected"); break;
			case 18: s = coco_string_create(L"\"*\" expected"); break;
			case 19: s = coco_string_create(L"\"/\" expected"); break;
			case 20: s = coco_string_create(L"\"DIV\" expected"); break;
			case 21: s = coco_string_create(L"\"MOD\" expected"); break;
			case 22: s = coco_string_create(L"\"&\" expected"); break;
			case 23: s = coco_string_create(L"\"IMPORT\" expected"); break;
			case 24: s = coco_string_create(L"\":=\" expected"); break;
			case 25: s = coco_string_create(L"\",\" expected"); break;
			case 26: s = coco_string_create(L"\";\" expected"); break;
			case 27: s = coco_string_create(L"\"CONST\" expected"); break;
			case 28: s = coco_string_create(L"\"TYPE\" expected"); break;
			case 29: s = coco_string_create(L"\"VAR\" expected"); break;
			case 30: s = coco_string_create(L"\"PROCEDURE\" expected"); break;
			case 31: s = coco_string_create(L"\":\" expected"); break;
			case 32: s = coco_string_create(L"\"BEGIN\" expected"); break;
			case 33: s = coco_string_create(L"\"END\" expected"); break;
			case 34: s = coco_string_create(L"\"^\" expected"); break;
			case 35: s = coco_string_create(L"\"(\" expected"); break;
			case 36: s = coco_string_create(L"\")\" expected"); break;
			case 37: s = coco_string_create(L"\"ARRAY\" expected"); break;
			case 38: s = coco_string_create(L"\"OF\" expected"); break;
			case 39: s = coco_string_create(L"\"RECORD\" expected"); break;
			case 40: s = coco_string_create(L"\"POINTER\" expected"); break;
			case 41: s = coco_string_create(L"\"TO\" expected"); break;
			case 42: s = coco_string_create(L"\"..\" expected"); break;
			case 43: s = coco_string_create(L"\"NIL\" expected"); break;
			case 44: s = coco_string_create(L"\"~\" expected"); break;
			case 45: s = coco_string_create(L"\".\" expected"); break;
			case 46: s = coco_string_create(L"\"[\" expected"); break;
			case 47: s = coco_string_create(L"\"]\" expected"); break;
			case 48: s = coco_string_create(L"\"{\" expected"); break;
			case 49: s = coco_string_create(L"\"}\" expected"); break;
			case 50: s = coco_string_create(L"\"IF\" expected"); break;
			case 51: s = coco_string_create(L"\"THEN\" expected"); break;
			case 52: s = coco_string_create(L"\"ELSIF\" expected"); break;
			case 53: s = coco_string_create(L"\"ELSE\" expected"); break;
			case 54: s = coco_string_create(L"\"CASE\" expected"); break;
			case 55: s = coco_string_create(L"\"|\" expected"); break;
			case 56: s = coco_string_create(L"\"WHILE\" expected"); break;
			case 57: s = coco_string_create(L"\"DO\" expected"); break;
			case 58: s = coco_string_create(L"\"REPEAT\" expected"); break;
			case 59: s = coco_string_create(L"\"UNTIL\" expected"); break;
			case 60: s = coco_string_create(L"\"FOR\" expected"); break;
			case 61: s = coco_string_create(L"\"BY\" expected"); break;
			case 62: s = coco_string_create(L"\"LOOP\" expected"); break;
			case 63: s = coco_string_create(L"\"WITH\" expected"); break;
			case 64: s = coco_string_create(L"\"EXIT\" expected"); break;
			case 65: s = coco_string_create(L"\"RETURN\" expected"); break;
			case 66: s = coco_string_create(L"\"MODULE\" expected"); break;
			case 67: s = coco_string_create(L"??? expected"); break;
			case 68: s = coco_string_create(L"invalid number"); break;
			case 69: s = coco_string_create(L"invalid Relation"); break;
			case 70: s = coco_string_create(L"invalid AddOp"); break;
			case 71: s = coco_string_create(L"invalid MulOp"); break;
			case 72: s = coco_string_create(L"invalid DeclSeq"); break;
			case 73: s = coco_string_create(L"invalid Type"); break;
			case 74: s = coco_string_create(L"invalid Factor"); break;

		default:
		{
			wchar_t format[20];
			coco_swprintf(format, 20, L"error %d", n);
			s = coco_string_create(format);
		}
		break;
	}
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	coco_string_delete(s);
	count++;
}

void Errors::Error(int line, int col, const wchar_t *s) {
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	count++;
}

void Errors::Warning(int line, int col, const wchar_t *s) {
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
}

void Errors::Warning(const wchar_t *s) {
	wprintf(L"%ls\n", s);
}

void Errors::Exception(const wchar_t* s) {
	wprintf(L"%ls", s); 
	exit(1);
}

} // namespace

