/*----------------------------------------------------------------------
Oberon2 compiler for x86
Copyright (c) 2012 Evgeniy Grigorievitch Philippov
Distributed under the terms of GNU General Public License, v.3 or later

Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/


#include <wchar.h>
#include "Parser.h"
#include "Scanner.h"


namespace Oberon {


void Parser::SynErr(int n) {
	//if (errDist >= minErrDist)
		errors->SynErr(la->line, la->col, n);
	errDist = 0;
}

void Parser::SemErr(const wchar_t* msg) {
	//if (errDist >= minErrDist)
		errors->Error(t->line, t->col, msg);
	errDist = 0;
}

void Parser::Get() {
	for (;;) {
		t = la;
		la = scanner->Scan();
		if (la->kind <= maxT) { ++errDist; break; }

		if (dummyToken != t) {
			dummyToken->kind = t->kind;
			dummyToken->pos = t->pos;
			dummyToken->col = t->col;
			dummyToken->line = t->line;
			dummyToken->next = NULL;
			coco_string_delete(dummyToken->val);
			dummyToken->val = coco_string_create(t->val);
			t = dummyToken;
		}
		la = t;
	}
}

void Parser::Expect(int n) {
	if (la->kind==n) Get(); else { SynErr(n); }
}

void Parser::ExpectWeak(int n, int follow) {
	if (la->kind == n) Get();
	else {
		SynErr(n);
		while (!StartOf(follow)) Get();
	}
}

bool Parser::WeakSeparator(int n, int syFol, int repFol) {
	if (la->kind == n) {Get(); return true;}
	else if (StartOf(repFol)) {return false;}
	else {
		SynErr(n);
		while (!(StartOf(syFol) || StartOf(repFol) || StartOf(0))) {
			Get();
		}
		return StartOf(syFol);
	}
}

void Parser::number(numberRecord &r) {
		if (la->kind == _integer) {
			IntegerRec(r.tokenString);
			r.numtype=num_int; 
		} else if (la->kind == _real) {
			RealRec(r.tokenString);
			r.numtype=num_real; 
		} else SynErr(70);
}

void Parser::IntegerRec(wchar_t* &tok) {
		Integer(tok);
}

void Parser::RealRec(wchar_t* &tok) {
		Real(tok);
}

void Parser::Relation(int &op) {
		op = illegal_operator; 
		switch (la->kind) {
		case 7 /* "=" */: {
			Get();
			op = equals; 
			break;
		}
		case 8 /* "#" */: {
			Get();
			op = notEquals; 
			break;
		}
		case 9 /* "<" */: {
			Get();
			op = less; 
			break;
		}
		case 10 /* "<=" */: {
			Get();
			op = lessOrEqual; 
			break;
		}
		case 11 /* ">" */: {
			Get();
			op = greater; 
			break;
		}
		case 12 /* ">=" */: {
			Get();
			op = greaterOrEqual; 
			break;
		}
		case 13 /* "IN" */: {
			Get();
			op = in; 
			break;
		}
		case 14 /* "IS" */: {
			Get();
			op = is; 
			break;
		}
		default: SynErr(71); break;
		}
}

void Parser::AddOp(int &op) {
		op = illegal_operator; 
		if (la->kind == 15 /* "+" */) {
			Get();
			op = plus; 
		} else if (la->kind == 16 /* "-" */) {
			Get();
			op = minus; 
		} else if (la->kind == 17 /* "OR" */) {
			Get();
			op = orOperation; 
		} else SynErr(72);
}

void Parser::MulOp(int &op) {
		op = illegal_operator; 
		if (la->kind == 18 /* "*" */) {
			Get();
			op = times; 
		} else if (la->kind == 19 /* "/" */) {
			Get();
			op = slash; 
		} else if (la->kind == 20 /* "DIV" */) {
			Get();
			op = divOp; 
		} else if (la->kind == 21 /* "MOD" */) {
			Get();
			op = modOp; 
		} else if (la->kind == 22 /* "&" */) {
			Get();
			op = ampersand; 
		} else SynErr(73);
}

void Parser::Expr(ExprRecord &expr) {
		SimpleExpr(expr.lhs);
		if (StartOf(1)) {
			expr.opAndRhsPresent=true; 
			Relation(expr.op);
			SimpleExpr(expr.rhs);
		} else if (StartOf(2)) {
			expr.opAndRhsPresent=false; 
		} else SynErr(74);
}

void Parser::SimpleExpr(SimpleExprRecord &e) {
		if (StartOf(3)) {
			if (StartOf(4)) {
			} else {
				Get();
			}
			e.minus=false; 
		} else if (la->kind == 16 /* "-" */) {
			Get();
			e.minus=true; 
		} else SynErr(75);
		Term(e.term);
		if (StartOf(5)) {
			e.nullOrNextSimpleExprAddOpRecord=0; 
		} else if (la->kind == 15 /* "+" */ || la->kind == 16 /* "-" */ || la->kind == 17 /* "OR" */) {
			e.nullOrNextSimpleExprAddOpRecord=new SimpleExprAddOpRecord(); abortIfNull(e.nullOrNextSimpleExprAddOpRecord); 
			SimpleExprAddOpClause(*e.nullOrNextSimpleExprAddOpRecord);
		} else SynErr(76);
}

void Parser::ConstExpr(ConstExprRecord &cexpr) {
		cexpr.valueHasBeenCalculated=false; 
		Expr(cexpr.expr);
}

void Parser::ModuleImportEntry(ModuleImportEntryRecord &r) {
		Ident(r.lhs);
		if (la->kind == 24 /* "," */ || la->kind == 26 /* ";" */) {
			r.rhsPresent=false; 
		} else if (la->kind == 23 /* ":=" */) {
			r.rhsPresent=true; 
			Get();
			Ident(r.rhs);
		} else SynErr(77);
}

void Parser::Ident(wchar_t* &tok) {
		Expect(_ident);
		tok = coco_string_create(t->val); 
}

void Parser::ModuleImportEntryList(ImportListRecord &r) {
		ModuleImportEntry(r.moduleImportEntry);
		if (la->kind == 26 /* ";" */) {
			r.nullOrPtrToNextModuleImportEntriesList=0; 
		} else if (la->kind == 24 /* "," */) {
			r.nullOrPtrToNextModuleImportEntriesList=new ImportListRecord(); abortIfNull(r.nullOrPtrToNextModuleImportEntriesList); 
			Get();
			ModuleImportEntryList(*(r.nullOrPtrToNextModuleImportEntriesList));
		} else SynErr(78);
}

void Parser::ImportList(ImportListRecord &r) {
		Expect(25 /* "IMPORT" */);
		ModuleImportEntryList(r);
		Expect(26 /* ";" */);
}

void Parser::DeclSeqConstDeclListMandatory(DeclSeqConstDeclListMandatoryRecord &r) {
		ConstDecl(r.constDecl);
		Expect(26 /* ";" */);
		if (StartOf(6)) {
			r.nullOrPtrToNextDeclSeqConstDeclListMandatory=0; 
		} else if (la->kind == _ident) {
			r.nullOrPtrToNextDeclSeqConstDeclListMandatory=new DeclSeqConstDeclListMandatoryRecord(); 
			abortIfNull(r.nullOrPtrToNextDeclSeqConstDeclListMandatory);
			
			DeclSeqConstDeclListMandatory(*(r.nullOrPtrToNextDeclSeqConstDeclListMandatory));
		} else SynErr(79);
}

void Parser::ConstDecl(ConstDeclRecord &r) {
		IdentDef(r.identDef);
		if (la->kind == 7 /* "=" */) {
			r.typePtr=0; 
		} else if (la->kind == 31 /* ":" */) {
			Get();
			Type(r.typePtr);
		} else SynErr(80);
		Expect(7 /* "=" */);
		ConstExpr(r.expr);
}

void Parser::DeclSeqConstDeclList(DeclSeqConstDeclListRecord &r) {
		if (StartOf(6)) {
			r.specified=false; 
		} else if (la->kind == _ident) {
			r.specified=true; 
			DeclSeqConstDeclListMandatory(r.constDecls);
		} else SynErr(81);
}

void Parser::DeclSeqTypeDeclListMandatory(DeclSeqTypeDeclListMandatoryRecord &r) {
		TypeDecl(r.typeDecl);
		Expect(26 /* ";" */);
		if (StartOf(6)) {
			r.nullOrPtrToNextDeclSeqTypeDeclListMandatory=0; 
		} else if (la->kind == _ident) {
			r.nullOrPtrToNextDeclSeqTypeDeclListMandatory=new DeclSeqTypeDeclListMandatoryRecord(); 
			abortIfNull(r.nullOrPtrToNextDeclSeqTypeDeclListMandatory);
			
			DeclSeqTypeDeclListMandatory(*(r.nullOrPtrToNextDeclSeqTypeDeclListMandatory));
		} else SynErr(82);
}

void Parser::TypeDecl(TypeDeclRecord &r) {
		IdentDef(r.identDef);
		Expect(7 /* "=" */);
		Type(r.typePtr);
}

void Parser::DeclSeqTypeDeclList(DeclSeqTypeDeclListRecord &r) {
		if (StartOf(6)) {
			r.specified=false; 
		} else if (la->kind == _ident) {
			r.specified=true; 
			DeclSeqTypeDeclListMandatory(r.typeDecls);
		} else SynErr(83);
}

void Parser::DeclSeqVarDeclListMandatory(DeclSeqVarDeclListMandatoryRecord &r) {
		VarDecl(r.varDecl);
		Expect(26 /* ";" */);
		if (StartOf(6)) {
			r.nullOrPtrToNextDeclSeqVarDeclListMandatory=0; 
		} else if (la->kind == _ident) {
			r.nullOrPtrToNextDeclSeqVarDeclListMandatory=new DeclSeqVarDeclListMandatoryRecord(); 
			abortIfNull(r.nullOrPtrToNextDeclSeqVarDeclListMandatory);
			
			DeclSeqVarDeclListMandatory(*(r.nullOrPtrToNextDeclSeqVarDeclListMandatory));
		} else SynErr(84);
}

void Parser::VarDecl(VarDeclRecord &r) {
		IdentList(r.identList);
		Expect(31 /* ":" */);
		Type(r.typePtr);
}

void Parser::DeclSeqVarDeclList(DeclSeqVarDeclListRecord &r) {
		if (StartOf(6)) {
			r.specified=false; 
		} else if (la->kind == _ident) {
			r.specified=true; 
			DeclSeqVarDeclListMandatory(r.varDecls);
		} else SynErr(85);
}

void Parser::DeclSeqConstTypeVarListMandatory(DeclSeqConstTypeVarListMandatoryRecord &r) {
		if (la->kind == 27 /* "CONST" */) {
			Get();
			DeclSeqConstDeclList(r.constDeclList);
			r.decl_variant=decl_const; 
		} else if (la->kind == 28 /* "TYPE" */) {
			Get();
			DeclSeqTypeDeclList(r.typeDeclList);
			r.decl_variant=decl_type; 
		} else if (la->kind == 29 /* "VAR" */) {
			Get();
			DeclSeqVarDeclList(r.varDeclList);
			r.decl_variant=decl_var; 
		} else SynErr(86);
		if (la->kind == 30 /* "PROCEDURE" */ || la->kind == 33 /* "BEGIN" */ || la->kind == 34 /* "END" */) {
			r.next=0; 
		} else if (la->kind == 27 /* "CONST" */ || la->kind == 28 /* "TYPE" */ || la->kind == 29 /* "VAR" */) {
			r.next=new DeclSeqConstTypeVarListMandatoryRecord(); abortIfNull(r.next); 
			DeclSeqConstTypeVarListMandatory(*(r.next));
		} else SynErr(87);
}

void Parser::DeclSeqConstTypeVarList(DeclSeqConstTypeVarListRecord &r) {
		if (la->kind == 30 /* "PROCEDURE" */ || la->kind == 33 /* "BEGIN" */ || la->kind == 34 /* "END" */) {
			r.specified=false; 
		} else if (la->kind == 27 /* "CONST" */ || la->kind == 28 /* "TYPE" */ || la->kind == 29 /* "VAR" */) {
			r.specified=true; 
			DeclSeqConstTypeVarListMandatory(r.constTypeVarList);
		} else SynErr(88);
}

void Parser::DeclSeqProcDeclFwdDeclListMandatory(DeclSeqProcDeclFwdDeclListMandatoryRecord &r) {
		Expect(30 /* "PROCEDURE" */);
		if (la->kind == _ident || la->kind == 36 /* "(" */) {
			ProcDecl(r.procDecl);
			r.decl_variant=decl_proc; 
		} else if (la->kind == 35 /* "^" */) {
			ForwardDecl(r.fwdDecl);
			r.decl_variant=decl_fwd; 
		} else SynErr(89);
		Expect(26 /* ";" */);
		if (la->kind == 33 /* "BEGIN" */ || la->kind == 34 /* "END" */) {
			r.next=0; 
		} else if (la->kind == 30 /* "PROCEDURE" */) {
			r.next=new DeclSeqProcDeclFwdDeclListMandatoryRecord(); abortIfNull(r.next); 
			DeclSeqProcDeclFwdDeclListMandatory(*(r.next));
		} else SynErr(90);
}

void Parser::ProcDecl(ProcDeclRecord &r) {
		identRec endName; 
		OptionalReceiver(r.optionalReceiver);
		IdentDef(r.identDef);
		OptionalFormalPars(r.optionalFormalPars);
		if (la->kind == 26 /* ";" */) {
			r.prim=ProcNotPrim; 
		} else if (la->kind == 7 /* "=" */) {
			Get();
			r.prim=ProcPrim_GetCommandLine; //TODO restrict to SYSTEM.Mod 
			
			Expect(32 /* "PROCEDURE_PRIMITIVE_GetCommandLine" */);
		} else SynErr(91);
		Expect(26 /* ";" */);
		r.declSeqPtr=new DeclSeqRecord(); abortIfNull(r.declSeqPtr); 
		DeclSeq(*(r.declSeqPtr));
		if (la->kind == 34 /* "END" */) {
			r.procBodySpecifiedHere=false; 
		} else if (la->kind == 33 /* "BEGIN" */) {
			r.procBodySpecifiedHere=true; 
			if(r.prim!=ProcNotPrim)Err(L"PROCEDURE is a primitive, BEGIN disallowed.");
			
			Get();
			StatementSeq(r.procBodyStmtSeq);
		} else SynErr(92);
		Expect(34 /* "END" */);
		Ident(endName);
		if(!coco_string_equal(endName, r.identDef.ident_)){
		Err(L"PROCEDURE identDef ... END ident: idents do not match."); 
		} 
		
}

void Parser::ForwardDecl(ForwardDeclRecord &r) {
		Expect(35 /* "^" */);
		OptionalReceiver(r.optionalReceiver);
		IdentDef(r.identDef);
		OptionalFormalPars(r.optionalFormalPars);
}

void Parser::DeclSeqProcDeclFwdDeclList(DeclSeqProcDeclFwdDeclListRecord &r) {
		if (la->kind == 33 /* "BEGIN" */ || la->kind == 34 /* "END" */) {
			r.specified=false; 
		} else if (la->kind == 30 /* "PROCEDURE" */) {
			r.specified=true; 
			DeclSeqProcDeclFwdDeclListMandatory(r.procDeclFwdDeclList);
		} else SynErr(93);
}

void Parser::DeclSeq(DeclSeqRecord &r) {
		DeclSeqConstTypeVarList(r.ctvlist);
		DeclSeqProcDeclFwdDeclList(r.pflist);
}

void Parser::IdentDef(IdentDefRecord &r) {
		IdentRec(r.ident_);
		if (StartOf(7)) {
			r.modifier=modifier_none; 
		} else if (la->kind == 18 /* "*" */) {
			Get();
			r.modifier=modifier_star; 
		} else if (la->kind == 16 /* "-" */) {
			Get();
			r.modifier=modifier_minus; 
		} else SynErr(94);
}

void Parser::Type(TypeRecord *&ptrToTypeRecord) {
		TypeQualident* ptq;  TypeARRAY* pta; TypeRECORD* ptrec; TypePOINTER* ptp; TypePROCEDURE *ptproc; 
		switch (la->kind) {
		case _ident: {
			ptrToTypeRecord=ptq=new TypeQualident(); abortIfNull(ptrToTypeRecord); 
			Qualident((*ptq).qualident);
			break;
		}
		case 39 /* "ARRAY" */: {
			ptrToTypeRecord=pta=new TypeARRAY(); abortIfNull(ptrToTypeRecord); 
			Get();
			TypeArray(*pta);
			break;
		}
		case 40 /* "RECORD" */: {
			ptrToTypeRecord=ptrec=new TypeRECORD(); abortIfNull(ptrToTypeRecord); 
			Get();
			TypeRecord_(*ptrec);
			Expect(34 /* "END" */);
			break;
		}
		case 41 /* "POINTER" */: {
			ptrToTypeRecord=ptp=new TypePOINTER(); abortIfNull(ptrToTypeRecord); 
			Get();
			Expect(42 /* "TO" */);
			Type((*ptp).pointedTypePtr);
			break;
		}
		case 30 /* "PROCEDURE" */: {
			ptrToTypeRecord=ptproc=new TypePROCEDURE(); abortIfNull(ptrToTypeRecord); 
			Get();
			TypeProcedure(*ptproc);
			break;
		}
		case 43 /* "SYSTEM_MOD_TYPE_PRIMITIVE_WCHAR" */: {
			ptrToTypeRecord=new TypePRIM_WCHAR(); abortIfNull(ptrToTypeRecord); //TODO verify only allowed in SYSTEM.Mod 
			
			Get();
			break;
		}
		default: SynErr(95); break;
		}
}

void Parser::IdentList(IdentListRecord &r) {
		IdentDef(r.identDef);
		if (la->kind == 31 /* ":" */) {
			r.nullOrCommaIdentList=0; 
		} else if (la->kind == 24 /* "," */) {
			r.nullOrCommaIdentList=new IdentListRecord(); abortIfNull(r.nullOrCommaIdentList); 
			Get();
			IdentList(*(r.nullOrCommaIdentList));
		} else SynErr(96);
}

void Parser::OptionalReceiver(OptionalReceiverRecord &r) {
		if (la->kind == _ident) {
			r.receiverSpecified=false; 
		} else if (la->kind == 36 /* "(" */) {
			r.receiverSpecified=true; 
			Receiver(r.receiver);
		} else SynErr(97);
}

void Parser::Receiver(ReceiverRecord &r) {
		Expect(36 /* "(" */);
		if (la->kind == _ident) {
			r.varSpecified=false; 
		} else if (la->kind == 29 /* "VAR" */) {
			r.varSpecified=true; 
			Get();
		} else SynErr(98);
		Ident(r.leftIdent);
		Expect(31 /* ":" */);
		Ident(r.rightIdent);
		Expect(37 /* ")" */);
}

void Parser::OptionalFormalPars(OptionalFormalParsRecord &r) {
		if (la->kind == 7 /* "=" */ || la->kind == 26 /* ";" */) {
			r.formalParsSpecified=false; 
		} else if (la->kind == 36 /* "(" */) {
			r.formalParsSpecified=true; 
			FormalPars(r.formalPars);
		} else SynErr(99);
}

void Parser::FormalPars(FormalParsRecord &r) {
		Expect(36 /* "(" */);
		if (la->kind == 37 /* ")" */) {
			r.optionalFPSectionsListPtr=0; 
		} else if (la->kind == _ident || la->kind == 29 /* "VAR" */) {
			r.optionalFPSectionsListPtr=new FPSectionsListMandatoryRecord(); abortIfNull(r.optionalFPSectionsListPtr); 
			FPSectionsListMandatory(*(r.optionalFPSectionsListPtr));
		} else SynErr(100);
		Expect(37 /* ")" */);
		if (StartOf(8)) {
			r.optionalQualidentPtr=0; 
		} else if (la->kind == 31 /* ":" */) {
			r.optionalQualidentPtr=new QualidentRecord(); abortIfNull(r.optionalQualidentPtr); 
			Get();
			Qualident(*(r.optionalQualidentPtr));
		} else SynErr(101);
}

void Parser::StatementSeq(StatementSeqRecord &r) {
		Statement(r.statementPtr);
		if (StartOf(9)) {
			r.nullOrPtrToNextStatementSeq=0; 
		} else if (la->kind == 26 /* ";" */) {
			r.nullOrPtrToNextStatementSeq=new StatementSeqRecord(); abortIfNull(r.nullOrPtrToNextStatementSeq); 
			Get();
			StatementSeq(*(r.nullOrPtrToNextStatementSeq));
		} else SynErr(102);
}

void Parser::FPSectionsListMandatory(FPSectionsListMandatoryRecord &r) {
		FPSection(r.fpSection);
		if (la->kind == 37 /* ")" */) {
			r.next=0; 
		} else if (la->kind == 26 /* ";" */) {
			r.next=new FPSectionsListMandatoryRecord(); abortIfNull(r.next); 
			Get();
			FPSectionsListMandatory(*(r.next));
		} else SynErr(103);
}

void Parser::FPSection(FPSectionRecord &r) {
		if (la->kind == _ident) {
			r.var=false; 
		} else if (la->kind == 29 /* "VAR" */) {
			r.var=true; 
			Get();
		} else SynErr(104);
		IdentList2(r.identList);
		Expect(31 /* ":" */);
		Type(r.typePtr);
}

void Parser::Qualident(QualidentRecord &r) {
		Ident(r.leftIdent);
		if (StartOf(10)) {
			r.rightIdent=0;
		} else if (la->kind == 47 /* "." */) {
			Get();
			Ident(r.rightIdent);
		} else SynErr(105);
}

void Parser::IdentList2(IdentList2Record &r) {
		Ident(r.ident_);
		if (la->kind == 31 /* ":" */) {
			r.nullOrCommaIdentList=0; 
		} else if (la->kind == 24 /* "," */) {
			r.nullOrCommaIdentList=new IdentList2Record(); abortIfNull(r.nullOrCommaIdentList); 
			Get();
			IdentList2(*(r.nullOrCommaIdentList));
		} else SynErr(106);
}

void Parser::TypeArrayConstExprListMandatory(TypeArrayConstExprListMandatoryRecord &r) {
		ConstExpr(r.dimensionConstExpr);
		if (la->kind == 38 /* "OF" */) {
			r.next=0; 
		} else if (la->kind == 24 /* "," */) {
			r.next=new TypeArrayConstExprListMandatoryRecord(); abortIfNull(r.next); 
			Get();
			TypeArrayConstExprListMandatory(*(r.next));
		} else SynErr(107);
}

void Parser::TypeArray(TypeARRAY &r) {
		if (la->kind == 38 /* "OF" */) {
			r.dimensionsConstExprsListPtr=0; 
		} else if (StartOf(11)) {
			r.dimensionsConstExprsListPtr=new TypeArrayConstExprListMandatoryRecord(); abortIfNull(r.dimensionsConstExprsListPtr); 
			TypeArrayConstExprListMandatory(*(r.dimensionsConstExprsListPtr));
		} else SynErr(108);
		Expect(38 /* "OF" */);
		Type(r.arrayElementTypePtr);
}

void Parser::MandatoryFieldsList(MandatoryFieldsListRecord &r) {
		FieldList(r.recordFieldsList);
		if (la->kind == 34 /* "END" */) {
			r.next=0; 
		} else if (la->kind == 26 /* ";" */) {
			r.next=new MandatoryFieldsListRecord(); abortIfNull(r.next); 
			Get();
			MandatoryFieldsList(*(r.next));
		} else SynErr(109);
}

void Parser::FieldList(FieldListRecord &r) {
		if (la->kind == 26 /* ";" */ || la->kind == 34 /* "END" */) {
			r.fieldsPresent=false; 
		} else if (la->kind == _ident) {
			r.fieldsPresent=true; 
			IdentList(r.identList);
			Expect(31 /* ":" */);
			Type(r.typePtr);
		} else SynErr(110);
}

void Parser::TypeRecord_(TypeRECORD &r) {
		if (la->kind == _ident || la->kind == 26 /* ";" */ || la->kind == 34 /* "END" */) {
			r.optionalQualidentPtr=0; 
		} else if (la->kind == 36 /* "(" */) {
			r.optionalQualidentPtr=new QualidentRecord(); abortIfNull(r.optionalQualidentPtr); 
			Get();
			Qualident(*(r.optionalQualidentPtr));
			Expect(37 /* ")" */);
		} else SynErr(111);
		MandatoryFieldsList(r.fieldsList);
}

void Parser::TypeProcedure(TypePROCEDURE &r) {
		if (StartOf(8)) {
			r.optionalFormalParsPtr=0; 
		} else if (la->kind == 36 /* "(" */) {
			r.optionalFormalParsPtr=new FormalParsRecord(); abortIfNull(r.optionalFormalParsPtr); 
			FormalPars(*(r.optionalFormalParsPtr));
		} else SynErr(112);
}

void Parser::Statement(StatementRecord*&ptrToStmtRecord) {
		Stmt_EXPR_OR_ASSIGN *psea; Stmt_IF *pif; Stmt_CASE *pcs;
		Stmt_WHILE *pw; Stmt_REPEAT *prpt; Stmt_FOR *pf; Stmt_LOOP *ploop; 
		Stmt_WITH *pwith; Stmt_RETURN *preturn; 
		
		switch (la->kind) {
		case 26 /* ";" */: case 34 /* "END" */: case 52 /* "ELSIF" */: case 54 /* "|" */: case 57 /* "ELSE" */: case 61 /* "UNTIL" */: {
			ptrToStmtRecord=new Stmt_EmptyStmt(); abortIfNull(ptrToStmtRecord); 
			break;
		}
		case _ident: case _string: case _integer: case _real: case _character: case 15 /* "+" */: case 16 /* "-" */: case 36 /* "(" */: case 45 /* "NIL" */: case 46 /* "~" */: case 50 /* "{" */: {
			ptrToStmtRecord=psea=new Stmt_EXPR_OR_ASSIGN(); abortIfNull(ptrToStmtRecord); 
			Expr((*psea).lhsExpr);
			if (StartOf(12)) {
				psea->assignment=false; 
			} else if (la->kind == 23 /* ":=" */) {
				psea->assignment=true; 
				Get();
				Expr((*psea).rhsExpr);
			} else SynErr(113);
			break;
		}
		case 56 /* "IF" */: {
			ptrToStmtRecord=pif=new Stmt_IF(); abortIfNull(ptrToStmtRecord); 
			Get();
			Expr((*pif).expr);
			Expect(53 /* "THEN" */);
			StatementSeq((*pif).thenStmtSeq);
			if (la->kind == 34 /* "END" */ || la->kind == 57 /* "ELSE" */) {
				pif->optionalElsifsListPtr=0; 
			} else if (la->kind == 52 /* "ELSIF" */) {
				pif->optionalElsifsListPtr=new MandatoryELSIFsListRecord(); abortIfNull(pif->optionalElsifsListPtr); 
				MandatoryELSIFsList(*((*pif).optionalElsifsListPtr));
			} else SynErr(114);
			if (la->kind == 34 /* "END" */) {
				pif->optionalElsePtr=0; 
			} else if (la->kind == 57 /* "ELSE" */) {
				pif->optionalElsePtr=new StatementSeqRecord(); abortIfNull(pif->optionalElsePtr); 
				Get();
				StatementSeq(*((*pif).optionalElsePtr));
			} else SynErr(115);
			Expect(34 /* "END" */);
			break;
		}
		case 58 /* "CASE" */: {
			ptrToStmtRecord=pcs=new Stmt_CASE(); abortIfNull(ptrToStmtRecord); 
			Get();
			Expr((*pcs).expr);
			Expect(38 /* "OF" */);
			Case((*pcs).caseFirst);
			if (la->kind == 34 /* "END" */ || la->kind == 57 /* "ELSE" */) {
				(*pcs).optionalOtherCasesPtr=0; 
			} else if (la->kind == 54 /* "|" */) {
				(*pcs).optionalOtherCasesPtr=new CasesRecord(); abortIfNull((*pcs).optionalOtherCasesPtr); 
				Cases(*((*pcs).optionalOtherCasesPtr));
			} else SynErr(116);
			if (la->kind == 34 /* "END" */) {
				(*pcs).optionalElsePtr=0; 
			} else if (la->kind == 57 /* "ELSE" */) {
				(*pcs).optionalElsePtr=new StatementSeqRecord(); abortIfNull((*pcs).optionalElsePtr); 
				Get();
				StatementSeq(*((*pcs).optionalElsePtr));
			} else SynErr(117);
			Expect(34 /* "END" */);
			break;
		}
		case 59 /* "WHILE" */: {
			ptrToStmtRecord=pw=new Stmt_WHILE(); abortIfNull(ptrToStmtRecord); 
			Get();
			Expr((*pw).expr);
			Expect(55 /* "DO" */);
			StatementSeq((*pw).whileBodyStatementSeq);
			Expect(34 /* "END" */);
			break;
		}
		case 60 /* "REPEAT" */: {
			ptrToStmtRecord=prpt=new Stmt_REPEAT(); abortIfNull(ptrToStmtRecord); 
			Get();
			StatementSeq((*prpt).repeatBodyStatementSeq);
			Expect(61 /* "UNTIL" */);
			Expr((*prpt).expr);
			break;
		}
		case 62 /* "FOR" */: {
			ptrToStmtRecord=pf=new Stmt_FOR(); abortIfNull(ptrToStmtRecord); 
			Get();
			Ident((*pf).forCounterVariableName);
			Expect(23 /* ":=" */);
			Expr((*pf).forCounterVariableInitialValueExpr);
			Expect(42 /* "TO" */);
			Expr((*pf).forCounterVariableToValueExpr);
			if (la->kind == 55 /* "DO" */) {
				(*pf).bySpecified=false; 
			} else if (la->kind == 63 /* "BY" */) {
				(*pf).bySpecified=true; 
				Get();
				ConstExpr((*pf).byValueConstExpr);
			} else SynErr(118);
			Expect(55 /* "DO" */);
			StatementSeq((*pf).forStatementSeq);
			Expect(34 /* "END" */);
			break;
		}
		case 64 /* "LOOP" */: {
			ptrToStmtRecord=ploop=new Stmt_LOOP(); abortIfNull(ptrToStmtRecord); 
			Get();
			StatementSeq((*ploop).loopStatementSeq);
			Expect(34 /* "END" */);
			break;
		}
		case 65 /* "WITH" */: {
			ptrToStmtRecord=pwith=new Stmt_WITH(); abortIfNull(ptrToStmtRecord); 
			Get();
			Guard((*pwith).firstGuard);
			Expect(55 /* "DO" */);
			StatementSeq((*pwith).firstStatementSeq);
			if (la->kind == 34 /* "END" */ || la->kind == 57 /* "ELSE" */) {
				(*pwith).optionalFurtherWithClausesPtr=0; 
			} else if (la->kind == 54 /* "|" */) {
				(*pwith).optionalFurtherWithClausesPtr=new FurtherWithClausesRecord(); abortIfNull((*pwith).optionalFurtherWithClausesPtr); 
				FurtherWithClauses(*((*pwith).optionalFurtherWithClausesPtr));
			} else SynErr(119);
			if (la->kind == 34 /* "END" */) {
				(*pwith).optionalElsePtr=0; 
			} else if (la->kind == 57 /* "ELSE" */) {
				(*pwith).optionalElsePtr=new StatementSeqRecord(); abortIfNull((*pwith).optionalElsePtr); 
				Get();
				StatementSeq(*((*pwith).optionalElsePtr));
			} else SynErr(120);
			Expect(34 /* "END" */);
			break;
		}
		case 66 /* "EXIT" */: {
			ptrToStmtRecord=new Stmt_EXIT(); abortIfNull(ptrToStmtRecord); 
			Get();
			break;
		}
		case 67 /* "RETURN" */: {
			ptrToStmtRecord=preturn=new Stmt_RETURN(); abortIfNull(ptrToStmtRecord); 
			Get();
			if (StartOf(12)) {
				preturn->exprPresent=false; 
			} else if (StartOf(11)) {
				preturn->exprPresent=true; 
				Expr((*preturn).expr);
			} else SynErr(121);
			break;
		}
		default: SynErr(122); break;
		}
}

void Parser::CaseLabelsLists(CaseLabelsListsRecord &r) {
		CaseLabels(r.caseLabelsNth);
		if (la->kind == 31 /* ":" */) {
			r.optionalFurtherCaseLabelsListsPtr=0; 
		} else if (la->kind == 24 /* "," */) {
			r.optionalFurtherCaseLabelsListsPtr=new CaseLabelsListsRecord(); abortIfNull(r.optionalFurtherCaseLabelsListsPtr); 
			Get();
			CaseLabelsLists(*(r.optionalFurtherCaseLabelsListsPtr));
		} else SynErr(123);
}

void Parser::CaseLabels(CaseLabelsRecord &r) {
		ConstExpr(r.constExpr1);
		if (la->kind == 24 /* "," */ || la->kind == 31 /* ":" */) {
			r.secondConstExprPresent=false; 
		} else if (la->kind == 44 /* ".." */) {
			r.secondConstExprPresent=true; 
			Get();
			ConstExpr(r.constExpr2);
		} else SynErr(124);
}

void Parser::Case(CaseRecord &r) {
		if (la->kind == 34 /* "END" */ || la->kind == 54 /* "|" */ || la->kind == 57 /* "ELSE" */) {
			r.emptyCase=true; 
		} else if (StartOf(11)) {
			r.emptyCase=false; 
			CaseLabelsLists(r.caseLabelsLists);
			Expect(31 /* ":" */);
			StatementSeq(r.stmtSeq);
		} else SynErr(125);
}

void Parser::Guard(GuardRecord &r) {
		Qualident(r.qualident1);
		Expect(31 /* ":" */);
		Qualident(r.qualident2);
}

void Parser::SimpleExprAddOpClause(SimpleExprAddOpRecord &r) {
		AddOp(r.addOp);
		Term(r.term);
		if (StartOf(5)) {
			r.nullOrNextSimpleExprAddOpRecord=0; 
		} else if (la->kind == 15 /* "+" */ || la->kind == 16 /* "-" */ || la->kind == 17 /* "OR" */) {
			r.nullOrNextSimpleExprAddOpRecord=new SimpleExprAddOpRecord(); abortIfNull(r.nullOrNextSimpleExprAddOpRecord); 
			SimpleExprAddOpClause(*r.nullOrNextSimpleExprAddOpRecord);
		} else SynErr(126);
}

void Parser::Term(TermRecord &t) {
		t.factorPtr=0; 
		Factor(t.factorPtr);
		if (StartOf(13)) {
			t.nullOrNextTermMulOpRecord=0; 
		} else if (StartOf(14)) {
			t.nullOrNextTermMulOpRecord=new TermMulOpRecord(); abortIfNull(t.nullOrNextTermMulOpRecord); 
			TermMulOpClause(*t.nullOrNextTermMulOpRecord);
		} else SynErr(127);
}

void Parser::TermMulOpClause(TermMulOpRecord &r) {
		MulOp(r.mulOp);
		r.factorPtr=0; 
		Factor(r.factorPtr);
		if (StartOf(13)) {
			r.nullOrNextTermMulOpRecord=0; 
		} else if (StartOf(14)) {
			r.nullOrNextTermMulOpRecord=new TermMulOpRecord(); abortIfNull(r.nullOrNextTermMulOpRecord); 
			TermMulOpClause(*r.nullOrNextTermMulOpRecord);
		} else SynErr(128);
}

void Parser::Factor(FactorRecord *&factorPtr) {
		FactorRecord_DesignatorMaybeWithExprList *fd;
		FactorRecord_number *fn;
		FactorRecord_character *fc;
		FactorRecord_string *fs;
		FactorRecord_Set *fset;
		FactorRecord_Expr *fexpr;
		FactorRecord_Expr *fexpr2;
		FactorRecord_tildeFactor *ftf;
		
		switch (la->kind) {
		case _ident: {
			factorPtr=fd=new FactorRecord_DesignatorMaybeWithExprList(); abortIfNull(factorPtr); 
			DesignatorMaybeWithExprList((*fd).r);
			break;
		}
		case _integer: case _real: {
			factorPtr=fn=new FactorRecord_number(); abortIfNull(factorPtr); 
			number((*fn).num);
			break;
		}
		case _character: {
			factorPtr=fc=new FactorRecord_character(); abortIfNull(factorPtr); 
			Character((*fc).ch);
			break;
		}
		case _string: {
			factorPtr=fs=new FactorRecord_string(); abortIfNull(factorPtr); 
			String((*fs).s);
			break;
		}
		case 45 /* "NIL" */: {
			factorPtr=new FactorRecord_NIL(); abortIfNull(factorPtr); 
			Get();
			break;
		}
		case 50 /* "{" */: {
			factorPtr=fset=new FactorRecord_Set(); abortIfNull(factorPtr); 
			Set((*fset).set);
			break;
		}
		case 36 /* "(" */: {
			factorPtr=fexpr=new FactorRecord_Expr(); abortIfNull(factorPtr); 
			Get();
			Expr((*fexpr).expr);
			while (la->kind == 24 /* "," */) {
				fexpr2=new FactorRecord_Expr(); abortIfNull(fexpr2); 
				Get();
				Expr((*fexpr2).expr);
			}
			Expect(37 /* ")" */);
			break;
		}
		case 46 /* "~" */: {
			factorPtr=ftf=new FactorRecord_tildeFactor(); abortIfNull(factorPtr); 
			ftf->factorPtr=0; 
			Get();
			Factor((*ftf).factorPtr);
			break;
		}
		default: SynErr(129); break;
		}
}

void Parser::DesignatorMaybeWithExprList(DesignatorMaybeWithExprListRecord &r) {
		IdentRec(r.identRec.ident_);
		if (StartOf(15)) {
			r.nullOrPtrToNextDesignatorMaybeWithExprListRepeatingPartRecord=0; 
		} else if (StartOf(16)) {
			r.nullOrPtrToNextDesignatorMaybeWithExprListRepeatingPartRecord=new DesignatorMaybeWithExprListRepeatingPartRecord(); 
			abortIfNull(r.nullOrPtrToNextDesignatorMaybeWithExprListRepeatingPartRecord);
			
			DesignatorMaybeWithExprListRepeatingPartClause(*(r.nullOrPtrToNextDesignatorMaybeWithExprListRepeatingPartRecord));
		} else SynErr(130);
}

void Parser::Character(wchar_t* &tok) {
		Expect(_character);
		tok = coco_string_create(t->val); 
}

void Parser::String(wchar_t* &tok) {
		Expect(_string);
		tok = coco_string_create(t->val); 
}

void Parser::Set(SetRecord &r) {
		r.nullOrPtrToNextSet=0; 
		Expect(50 /* "{" */);
		if (la->kind == 51 /* "}" */) {
			r.emptySet=true; 
		} else if (StartOf(11)) {
			r.emptySet=false; 
			Element(r.range);
			if (la->kind == 51 /* "}" */) {
			} else if (la->kind == 24 /* "," */) {
				r.nullOrPtrToNextSet=new SetRecord(); abortIfNull(r.nullOrPtrToNextSet); 
				ElementRangeList(*(r.nullOrPtrToNextSet));
			} else SynErr(131);
		} else SynErr(132);
		Expect(51 /* "}" */);
}

void Parser::DesignatorMaybeWithExprListRepeatingPartClause(DesignatorMaybeWithExprListRepeatingPartRecord &r) {
		if (la->kind == 47 /* "." */) {
			Get();
			IdentRec(r.clause1_identRec);
			r.clauseNumber=1; 
		} else if (la->kind == 48 /* "[" */) {
			Get();
			ExprList(r.clause2_exprList);
			Expect(49 /* "]" */);
			r.clauseNumber=2; 
		} else if (la->kind == 35 /* "^" */) {
			Get();
			r.clauseNumber=3; 
		} else if (la->kind == 36 /* "(" */) {
			Get();
			QualidentOrOptionalExprList(r.clause4_qualidentOrOptionalExprList);
			Expect(37 /* ")" */);
			r.clauseNumber=4; 
		} else SynErr(133);
		if (StartOf(15)) {
			r.nullOrPtrToNextDesignatorMaybeWithExprListRepeatingPartRecord=0; 
		} else if (StartOf(16)) {
			r.nullOrPtrToNextDesignatorMaybeWithExprListRepeatingPartRecord=new DesignatorMaybeWithExprListRepeatingPartRecord(); 
			abortIfNull(r.nullOrPtrToNextDesignatorMaybeWithExprListRepeatingPartRecord); 
			
			DesignatorMaybeWithExprListRepeatingPartClause(*(r.nullOrPtrToNextDesignatorMaybeWithExprListRepeatingPartRecord));
		} else SynErr(134);
}

void Parser::IdentRec(wchar_t* &tok) {
		Ident(tok);
}

void Parser::ExprList(ExprListRecord &r) {
		Expr(r.expr);
		if (la->kind == 37 /* ")" */ || la->kind == 49 /* "]" */) {
			r.nullOrCommaExprList=0; 
		} else if (la->kind == 24 /* "," */) {
			r.nullOrCommaExprList=new ExprListRecord(); abortIfNull(r.nullOrCommaExprList); 
			Get();
			ExprList(*(r.nullOrCommaExprList));
		} else SynErr(135);
}

void Parser::QualidentOrOptionalExprList(QualidentOrOptionalExprListRecord &r) {
		if (la->kind == 37 /* ")" */) {
			r.exprListPresent=false; 
		} else if (StartOf(11)) {
			r.exprListPresent=true; 
			ExprList(r.exprList);
		} else SynErr(136);
}

void Parser::ElementRangeList(SetRecord &r) {
		r.emptySet=false; r.nullOrPtrToNextSet=0; 
		Expect(24 /* "," */);
		Element(r.range);
		if (la->kind == 51 /* "}" */) {
			r.nullOrPtrToNextSet=0; 
		} else if (la->kind == 24 /* "," */) {
			r.nullOrPtrToNextSet=new SetRecord(); abortIfNull(r.nullOrPtrToNextSet); 
			ElementRangeList(*(r.nullOrPtrToNextSet));
		} else SynErr(137);
}

void Parser::Element(ElementRangeRecord &r) {
		Expr(r.expr1);
		if (la->kind == 24 /* "," */ || la->kind == 51 /* "}" */) {
			r.isrange=false; 
		} else if (la->kind == 44 /* ".." */) {
			r.isrange=true; 
			Get();
			Expr(r.expr2);
		} else SynErr(138);
}

void Parser::MandatoryELSIFsList(MandatoryELSIFsListRecord &r) {
		Expect(52 /* "ELSIF" */);
		Expr(r.expr);
		Expect(53 /* "THEN" */);
		StatementSeq(r.thenStmtSeq);
		if (la->kind == 34 /* "END" */ || la->kind == 57 /* "ELSE" */) {
			r.optionalElsifsListPtr=0; 
		} else if (la->kind == 52 /* "ELSIF" */) {
			r.optionalElsifsListPtr=new MandatoryELSIFsListRecord(); abortIfNull(r.optionalElsifsListPtr); 
			MandatoryELSIFsList(*(r.optionalElsifsListPtr));
		} else SynErr(139);
}

void Parser::Cases(CasesRecord &r) {
		Expect(54 /* "|" */);
		Case(r.caseNth);
		if (la->kind == 34 /* "END" */ || la->kind == 57 /* "ELSE" */) {
			r.optionalOtherCasesPtr=0; 
		} else if (la->kind == 54 /* "|" */) {
			r.optionalOtherCasesPtr=new CasesRecord(); abortIfNull(r.optionalOtherCasesPtr); 
			Cases(*(r.optionalOtherCasesPtr));
		} else SynErr(140);
}

void Parser::FurtherWithClauses(FurtherWithClausesRecord &r) {
		Expect(54 /* "|" */);
		Guard(r.guard);
		Expect(55 /* "DO" */);
		StatementSeq(r.statementSeq);
		if (la->kind == 34 /* "END" */ || la->kind == 57 /* "ELSE" */) {
			r.next=0; 
		} else if (la->kind == 54 /* "|" */) {
			r.next=new FurtherWithClausesRecord(); abortIfNull(r.next); 
			FurtherWithClauses(*(r.next));
		} else SynErr(141);
}

void Parser::Module(ModuleRecord &r) {
		wchar_t *endName; 
		Expect(68 /* "MODULE" */);
		Ident(r.moduleName);
		Expect(26 /* ";" */);
		if (StartOf(6)) {
			r.importListPtr=0; 
		} else if (la->kind == 25 /* "IMPORT" */) {
			r.importListPtr=new ImportListRecord(); abortIfNull(r.importListPtr); 
			ImportList(*(r.importListPtr));
		} else SynErr(142);
		DeclSeq(r.declSeq);
		if (la->kind == 34 /* "END" */) {
			r.stmtSeqPtr = 0; 
		} else if (la->kind == 33 /* "BEGIN" */) {
			r.stmtSeqPtr=new StatementSeqRecord(); abortIfNull(r.stmtSeqPtr); 
			Get();
			StatementSeq(*r.stmtSeqPtr);
		} else SynErr(143);
		Expect(34 /* "END" */);
		Ident(endName);
		if(!coco_string_equal(endName, r.moduleName)){
		Err(L"MODULE ident ... END ident.: idents do not match.");
		} 
		
		Expect(47 /* "." */);
		wprintf(L"MODULE '%ls' read success.\n",r.moduleName); 
}

void Parser::Integer(wchar_t* &tok) {
		Expect(_integer);
		tok = coco_string_create(t->val); 
}

void Parser::Real(wchar_t* &tok) {
		Expect(_real);
		tok = coco_string_create(t->val); 
}

void Parser::Oberon() {
		InitDeclarations(); modulePtr=new ModuleRecord(this); abortIfNull(modulePtr); 
		Module(*(modulePtr));
}




// If the user declared a method Init and a mehtod Destroy they should
// be called in the contructur and the destructor respctively.
//
// The following templates are used to recognize if the user declared
// the methods Init and Destroy.

template<typename T>
struct ParserInitExistsRecognizer {
	template<typename U, void (U::*)() = &U::Init>
	struct ExistsIfInitIsDefinedMarker{};

	struct InitIsMissingType {
		char dummy1;
	};
	
	struct InitExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static InitIsMissingType is_here(...);

	// exist only if ExistsIfInitIsDefinedMarker is defined
	template<typename U>
	static InitExistsType is_here(ExistsIfInitIsDefinedMarker<U>*);

	enum { InitExists = (sizeof(is_here<T>(NULL)) == sizeof(InitExistsType)) };
};

template<typename T>
struct ParserDestroyExistsRecognizer {
	template<typename U, void (U::*)() = &U::Destroy>
	struct ExistsIfDestroyIsDefinedMarker{};

	struct DestroyIsMissingType {
		char dummy1;
	};
	
	struct DestroyExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static DestroyIsMissingType is_here(...);

	// exist only if ExistsIfDestroyIsDefinedMarker is defined
	template<typename U>
	static DestroyExistsType is_here(ExistsIfDestroyIsDefinedMarker<U>*);

	enum { DestroyExists = (sizeof(is_here<T>(NULL)) == sizeof(DestroyExistsType)) };
};

// The folloing templates are used to call the Init and Destroy methods if they exist.

// Generic case of the ParserInitCaller, gets used if the Init method is missing
template<typename T, bool = ParserInitExistsRecognizer<T>::InitExists>
struct ParserInitCaller {
	static void CallInit(T *t) {
		// nothing to do
	}
};

// True case of the ParserInitCaller, gets used if the Init method exists
template<typename T>
struct ParserInitCaller<T, true> {
	static void CallInit(T *t) {
		t->Init();
	}
};

// Generic case of the ParserDestroyCaller, gets used if the Destroy method is missing
template<typename T, bool = ParserDestroyExistsRecognizer<T>::DestroyExists>
struct ParserDestroyCaller {
	static void CallDestroy(T *t) {
		// nothing to do
	}
};

// True case of the ParserDestroyCaller, gets used if the Destroy method exists
template<typename T>
struct ParserDestroyCaller<T, true> {
	static void CallDestroy(T *t) {
		t->Destroy();
	}
};

void Parser::Parse() {
	t = NULL;
	la = dummyToken = new Token();
	la->val = coco_string_create(L"Dummy Token");
	Get();
	Oberon();
	Expect(0);
}

Parser::Parser(Scanner *scanner) {
	//parserListener=0;
	maxT = 69;

	ParserInitCaller<Parser>::CallInit(this);
	dummyToken = NULL;
	t = la = NULL;
	minErrDist = 2;
	errDist = minErrDist;
	this->scanner = scanner;
	errors = new Errors();
}

bool Parser::StartOf(int s) {
	const bool T = true;
	const bool x = false;

	static bool set[17][71] = {
		{T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x},
		{x,x,x,x, x,x,x,T, T,T,T,T, T,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,x,T,x, x,x,x,T, x,x,T,x, x,T,T,x, x,x,T,x, T,x,x,x, x,T,x,T, T,T,T,T, x,T,x,x, x,T,x,T, x,x,x,x, x,x,x},
		{x,T,x,T, T,T,T,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,T,T,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x},
		{x,T,x,T, T,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,T,T,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x},
		{x,x,x,x, x,x,x,T, T,T,T,T, T,T,T,x, x,x,x,x, x,x,x,T, T,x,T,x, x,x,x,T, x,x,T,x, x,T,T,x, x,x,T,x, T,x,x,x, x,T,x,T, T,T,T,T, x,T,x,x, x,T,x,T, x,x,x,x, x,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,T,T,x, x,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x},
		{x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,T,x, x,x,x,T, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x},
		{x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,T,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,T,x, x,T,x,x, x,T,x,x, x,x,x,x, x,x,x},
		{x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,T, x,x,T,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x},
		{x,T,x,T, T,T,T,x, x,x,x,x, x,x,x,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,T,T,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,T,x, x,T,x,x, x,T,x,x, x,x,x,x, x,x,x},
		{x,x,x,x, x,x,x,T, T,T,T,T, T,T,T,T, T,T,x,x, x,x,x,T, T,x,T,x, x,x,x,T, x,x,T,x, x,T,T,x, x,x,T,x, T,x,x,x, x,T,x,T, T,T,T,T, x,T,x,x, x,T,x,T, x,x,x,x, x,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, T,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x},
		{x,x,x,x, x,x,x,T, T,T,T,T, T,T,T,T, T,T,T,T, T,T,T,T, T,x,T,x, x,x,x,T, x,x,T,x, x,T,T,x, x,x,T,x, T,x,x,x, x,T,x,T, T,T,T,T, x,T,x,x, x,T,x,T, x,x,x,x, x,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,x,x,x, x,x,x,x, x,x,x,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x}
	};



	return set[s][la->kind];
}

Parser::~Parser() {
	ParserDestroyCaller<Parser>::CallDestroy(this);
	delete errors;
	delete dummyToken;
}

Errors::Errors() {
	count = 0;
}

void Errors::SynErr(int line, int col, int n) {
	wchar_t* s;
	switch (n) {
			case 0: s = coco_string_create(L"EOF expected"); break;
			case 1: s = coco_string_create(L"ident expected"); break;
			case 2: s = coco_string_create(L"badString expected"); break;
			case 3: s = coco_string_create(L"string expected"); break;
			case 4: s = coco_string_create(L"integer expected"); break;
			case 5: s = coco_string_create(L"real expected"); break;
			case 6: s = coco_string_create(L"character expected"); break;
			case 7: s = coco_string_create(L"\"=\" expected"); break;
			case 8: s = coco_string_create(L"\"#\" expected"); break;
			case 9: s = coco_string_create(L"\"<\" expected"); break;
			case 10: s = coco_string_create(L"\"<=\" expected"); break;
			case 11: s = coco_string_create(L"\">\" expected"); break;
			case 12: s = coco_string_create(L"\">=\" expected"); break;
			case 13: s = coco_string_create(L"\"IN\" expected"); break;
			case 14: s = coco_string_create(L"\"IS\" expected"); break;
			case 15: s = coco_string_create(L"\"+\" expected"); break;
			case 16: s = coco_string_create(L"\"-\" expected"); break;
			case 17: s = coco_string_create(L"\"OR\" expected"); break;
			case 18: s = coco_string_create(L"\"*\" expected"); break;
			case 19: s = coco_string_create(L"\"/\" expected"); break;
			case 20: s = coco_string_create(L"\"DIV\" expected"); break;
			case 21: s = coco_string_create(L"\"MOD\" expected"); break;
			case 22: s = coco_string_create(L"\"&\" expected"); break;
			case 23: s = coco_string_create(L"\":=\" expected"); break;
			case 24: s = coco_string_create(L"\",\" expected"); break;
			case 25: s = coco_string_create(L"\"IMPORT\" expected"); break;
			case 26: s = coco_string_create(L"\";\" expected"); break;
			case 27: s = coco_string_create(L"\"CONST\" expected"); break;
			case 28: s = coco_string_create(L"\"TYPE\" expected"); break;
			case 29: s = coco_string_create(L"\"VAR\" expected"); break;
			case 30: s = coco_string_create(L"\"PROCEDURE\" expected"); break;
			case 31: s = coco_string_create(L"\":\" expected"); break;
			case 32: s = coco_string_create(L"\"PROCEDURE_PRIMITIVE_GetCommandLine\" expected"); break;
			case 33: s = coco_string_create(L"\"BEGIN\" expected"); break;
			case 34: s = coco_string_create(L"\"END\" expected"); break;
			case 35: s = coco_string_create(L"\"^\" expected"); break;
			case 36: s = coco_string_create(L"\"(\" expected"); break;
			case 37: s = coco_string_create(L"\")\" expected"); break;
			case 38: s = coco_string_create(L"\"OF\" expected"); break;
			case 39: s = coco_string_create(L"\"ARRAY\" expected"); break;
			case 40: s = coco_string_create(L"\"RECORD\" expected"); break;
			case 41: s = coco_string_create(L"\"POINTER\" expected"); break;
			case 42: s = coco_string_create(L"\"TO\" expected"); break;
			case 43: s = coco_string_create(L"\"SYSTEM_MOD_TYPE_PRIMITIVE_WCHAR\" expected"); break;
			case 44: s = coco_string_create(L"\"..\" expected"); break;
			case 45: s = coco_string_create(L"\"NIL\" expected"); break;
			case 46: s = coco_string_create(L"\"~\" expected"); break;
			case 47: s = coco_string_create(L"\".\" expected"); break;
			case 48: s = coco_string_create(L"\"[\" expected"); break;
			case 49: s = coco_string_create(L"\"]\" expected"); break;
			case 50: s = coco_string_create(L"\"{\" expected"); break;
			case 51: s = coco_string_create(L"\"}\" expected"); break;
			case 52: s = coco_string_create(L"\"ELSIF\" expected"); break;
			case 53: s = coco_string_create(L"\"THEN\" expected"); break;
			case 54: s = coco_string_create(L"\"|\" expected"); break;
			case 55: s = coco_string_create(L"\"DO\" expected"); break;
			case 56: s = coco_string_create(L"\"IF\" expected"); break;
			case 57: s = coco_string_create(L"\"ELSE\" expected"); break;
			case 58: s = coco_string_create(L"\"CASE\" expected"); break;
			case 59: s = coco_string_create(L"\"WHILE\" expected"); break;
			case 60: s = coco_string_create(L"\"REPEAT\" expected"); break;
			case 61: s = coco_string_create(L"\"UNTIL\" expected"); break;
			case 62: s = coco_string_create(L"\"FOR\" expected"); break;
			case 63: s = coco_string_create(L"\"BY\" expected"); break;
			case 64: s = coco_string_create(L"\"LOOP\" expected"); break;
			case 65: s = coco_string_create(L"\"WITH\" expected"); break;
			case 66: s = coco_string_create(L"\"EXIT\" expected"); break;
			case 67: s = coco_string_create(L"\"RETURN\" expected"); break;
			case 68: s = coco_string_create(L"\"MODULE\" expected"); break;
			case 69: s = coco_string_create(L"??? expected"); break;
			case 70: s = coco_string_create(L"invalid number"); break;
			case 71: s = coco_string_create(L"invalid Relation"); break;
			case 72: s = coco_string_create(L"invalid AddOp"); break;
			case 73: s = coco_string_create(L"invalid MulOp"); break;
			case 74: s = coco_string_create(L"invalid Expr"); break;
			case 75: s = coco_string_create(L"invalid SimpleExpr"); break;
			case 76: s = coco_string_create(L"invalid SimpleExpr"); break;
			case 77: s = coco_string_create(L"invalid ModuleImportEntry"); break;
			case 78: s = coco_string_create(L"invalid ModuleImportEntryList"); break;
			case 79: s = coco_string_create(L"invalid DeclSeqConstDeclListMandatory"); break;
			case 80: s = coco_string_create(L"invalid ConstDecl"); break;
			case 81: s = coco_string_create(L"invalid DeclSeqConstDeclList"); break;
			case 82: s = coco_string_create(L"invalid DeclSeqTypeDeclListMandatory"); break;
			case 83: s = coco_string_create(L"invalid DeclSeqTypeDeclList"); break;
			case 84: s = coco_string_create(L"invalid DeclSeqVarDeclListMandatory"); break;
			case 85: s = coco_string_create(L"invalid DeclSeqVarDeclList"); break;
			case 86: s = coco_string_create(L"invalid DeclSeqConstTypeVarListMandatory"); break;
			case 87: s = coco_string_create(L"invalid DeclSeqConstTypeVarListMandatory"); break;
			case 88: s = coco_string_create(L"invalid DeclSeqConstTypeVarList"); break;
			case 89: s = coco_string_create(L"invalid DeclSeqProcDeclFwdDeclListMandatory"); break;
			case 90: s = coco_string_create(L"invalid DeclSeqProcDeclFwdDeclListMandatory"); break;
			case 91: s = coco_string_create(L"invalid ProcDecl"); break;
			case 92: s = coco_string_create(L"invalid ProcDecl"); break;
			case 93: s = coco_string_create(L"invalid DeclSeqProcDeclFwdDeclList"); break;
			case 94: s = coco_string_create(L"invalid IdentDef"); break;
			case 95: s = coco_string_create(L"invalid Type"); break;
			case 96: s = coco_string_create(L"invalid IdentList"); break;
			case 97: s = coco_string_create(L"invalid OptionalReceiver"); break;
			case 98: s = coco_string_create(L"invalid Receiver"); break;
			case 99: s = coco_string_create(L"invalid OptionalFormalPars"); break;
			case 100: s = coco_string_create(L"invalid FormalPars"); break;
			case 101: s = coco_string_create(L"invalid FormalPars"); break;
			case 102: s = coco_string_create(L"invalid StatementSeq"); break;
			case 103: s = coco_string_create(L"invalid FPSectionsListMandatory"); break;
			case 104: s = coco_string_create(L"invalid FPSection"); break;
			case 105: s = coco_string_create(L"invalid Qualident"); break;
			case 106: s = coco_string_create(L"invalid IdentList2"); break;
			case 107: s = coco_string_create(L"invalid TypeArrayConstExprListMandatory"); break;
			case 108: s = coco_string_create(L"invalid TypeArray"); break;
			case 109: s = coco_string_create(L"invalid MandatoryFieldsList"); break;
			case 110: s = coco_string_create(L"invalid FieldList"); break;
			case 111: s = coco_string_create(L"invalid TypeRecord_"); break;
			case 112: s = coco_string_create(L"invalid TypeProcedure"); break;
			case 113: s = coco_string_create(L"invalid Statement"); break;
			case 114: s = coco_string_create(L"invalid Statement"); break;
			case 115: s = coco_string_create(L"invalid Statement"); break;
			case 116: s = coco_string_create(L"invalid Statement"); break;
			case 117: s = coco_string_create(L"invalid Statement"); break;
			case 118: s = coco_string_create(L"invalid Statement"); break;
			case 119: s = coco_string_create(L"invalid Statement"); break;
			case 120: s = coco_string_create(L"invalid Statement"); break;
			case 121: s = coco_string_create(L"invalid Statement"); break;
			case 122: s = coco_string_create(L"invalid Statement"); break;
			case 123: s = coco_string_create(L"invalid CaseLabelsLists"); break;
			case 124: s = coco_string_create(L"invalid CaseLabels"); break;
			case 125: s = coco_string_create(L"invalid Case"); break;
			case 126: s = coco_string_create(L"invalid SimpleExprAddOpClause"); break;
			case 127: s = coco_string_create(L"invalid Term"); break;
			case 128: s = coco_string_create(L"invalid TermMulOpClause"); break;
			case 129: s = coco_string_create(L"invalid Factor"); break;
			case 130: s = coco_string_create(L"invalid DesignatorMaybeWithExprList"); break;
			case 131: s = coco_string_create(L"invalid Set"); break;
			case 132: s = coco_string_create(L"invalid Set"); break;
			case 133: s = coco_string_create(L"invalid DesignatorMaybeWithExprListRepeatingPartClause"); break;
			case 134: s = coco_string_create(L"invalid DesignatorMaybeWithExprListRepeatingPartClause"); break;
			case 135: s = coco_string_create(L"invalid ExprList"); break;
			case 136: s = coco_string_create(L"invalid QualidentOrOptionalExprList"); break;
			case 137: s = coco_string_create(L"invalid ElementRangeList"); break;
			case 138: s = coco_string_create(L"invalid Element"); break;
			case 139: s = coco_string_create(L"invalid MandatoryELSIFsList"); break;
			case 140: s = coco_string_create(L"invalid Cases"); break;
			case 141: s = coco_string_create(L"invalid FurtherWithClauses"); break;
			case 142: s = coco_string_create(L"invalid Module"); break;
			case 143: s = coco_string_create(L"invalid Module"); break;

		default:
		{
			wchar_t format[20];
			coco_swprintf(format, 20, L"error %d", n);
			s = coco_string_create(format);
		}
		break;
	}
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	coco_string_delete(s);
	count++;
}

void Errors::Error(int line, int col, const wchar_t *s) {
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	count++;
}

void Errors::Warning(int line, int col, const wchar_t *s) {
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
}

void Errors::Warning(const wchar_t *s) {
	wprintf(L"%ls\n", s);
}

void Errors::Exception(const wchar_t* s) {
	wprintf(L"%ls", s); 
	exit(1);
}

void Parser::ModuleRecord::addImportedModuleAlias(const wchar_t* const moduleAlias, Parser *parser){
	std::pair<const wchar_t*,Parser*> newmod(moduleAlias, parser);

	typedef TModuleAliasTable::iterator hmit;
	typedef std::pair<hmit, bool> retcode;

	//insert unique
	retcode insertResult = moduleAlias2parser.insert(newmod);

	if(!(insertResult.second)){
		//output an error
		const wchar_t *fmt=L"imported module alias/name declared twice: %ls";
		size_t len=wstrlen(fmt)-3+wstrlen(moduleAlias)+1;
		wchar_t *msg=new wchar_t[len];abortIfNull(msg);
		(void)wsprintf(msg, len, fmt, moduleAlias);
		parent->Err(msg);
		delete[] msg;
	}
}

} // namespace

